#cython: boundscheck=False
#cython: wraparound=False
#cython: cdivision=True
#cython: nonecheck=False
#cython: overflowcheck=False
#cython: embedsignature=True
#cython: infer_types=False
r"""
Tria3R - Triangular element with reduced integration (:mod:`pyfe3d.tria3r`)
===========================================================================

.. currentmodule:: pyfe3d.tria3r

"""
from libc.math cimport fabs

import numpy as np
cimport numpy as np

from .shellprop cimport ShellProp

ctypedef np.int64_t cINT
INT = np.int64
ctypedef np.double_t cDOUBLE
DOUBLE = np.float64
cdef cINT DOF = 6
cdef cINT NUM_NODES = 3


cdef class Tria3RData:
    r"""
    Used to allocate memory for the sparse matrices.

    Attributes
    ----------
    KC0_SPARSE_SIZE : int
        ``KC0_SPARSE_SIZE = 324``

    KG_SPARSE_SIZE : int
        ``KG_SPARSE_SIZE = 81``

    M_SPARSE_SIZE : int
        ``M_SPARSE_SIZE = 270``

    """
    cdef public cINT KC0_SPARSE_SIZE
    cdef public cINT KG_SPARSE_SIZE
    cdef public cINT M_SPARSE_SIZE
    def __cinit__(Tria3RData self):
        self.KC0_SPARSE_SIZE = 324
        self.KG_SPARSE_SIZE = 81
        self.M_SPARSE_SIZE = 270

cdef class Tria3RProbe:
    r"""
    Probe used for local coordinates, local displacements, local stresses etc

    Attributes
    ----------
    xe : array-like
        Array of size ``NUM_NODES*DOF//2=9`` containing the nodal coordinates
        in the element coordinate system, in the following order
        `{x_e}_1, {y_e}_1, {z_e}_1, `{x_e}_2, {y_e}_2, {z_e}_2`, `{x_e}_3,
        {y_e}_3, {z_e}_3`.
    ue : array-like
        Array of size ``NUM_NODES*DOF=18`` containing the element displacements
        in the following order `{u_e}_1, {v_e}_1, {w_e}_1, {{r_x}_e}_1,
        {{r_y}_e}_1, {{r_z}_e}_1`, `{u_e}_2, {v_e}_2, {w_e}_2, {{r_x}_e}_2,
        {{r_y}_e}_2, {{r_z}_e}_2`, `{u_e}_3, {v_e}_3, {w_e}_3, {{r_x}_e}_3,
        {{r_y}_e}_3, {{r_z}_e}_3`.

    """
    cdef public cDOUBLE[:] xe
    cdef public cDOUBLE[:] ue
    def __cinit__(Tria3RProbe self):
        self.xe = np.zeros(NUM_NODES*DOF//2, dtype=DOUBLE)
        self.ue = np.zeros(NUM_NODES*DOF, dtype=DOUBLE)

cdef class Tria3R:
    r"""
    Nodal connectivity for the triangular element similar to Nastran's CTRIA3::

        3
        |\
        | \    positive normal in CCW
        |  \
        |___\
        1    2

    The element coordinate system is determined identically what is explained
    in Nastran's quick reference guide for the CTRIA3 element, as illustrated
    below.

    .. image:: ../figures/nastran_cquad3.svg

    Attributes
    ----------
    eid : int
        Element identification number.
    area : double
        Element area.
    alphat : double
        Element drilling penalty factor for the plate drilling stiffness,
        defined according to Eq. 2.20 in the reference below. The default value
        of ``alphat = 1.`` comes from the same reference:

            Adam, A.E. Mohamed, A.E. Hassaballa, Degenerated Four Nodes Shell
            Element with Drilling Degree of Freedom, IOSR J. Eng. 3 (2013)
            10–20. www.iosrjen.org (accessed April 20, 2020).

        For those familiar with NASTRAN, ``alphat`` can be calculated based on
        NASTRAN's ``K6ROT`` parameters as ``alphat = 1.e-6*K6ROT``. The default
        value according to AUTODESK NASTRAN's quick reference guide is ``K6ROT
        = 100.`` for static analysis and ``K6ROT=1.e4`` for modal solutions.
        MSC NASTRAN's quick reference guide states that ``K6ROT > 100.`` should
        not be used, but this is controversion, already being controversial to
        what AUTODESK NASTRAN's manual says.

    r11, r12, r13, r21, r22, r23, r31, r32, r33 : double
        Rotation matrix to the global coordinate system.
    m11, m12, m21, m22 : double
        Rotation matrix only for the constitutive relations. Used when a
        material direction is used instead of the element local coordinates.
    c1, c2, c3: int
        Position of each node in the global stiffness matrix.
    n1, n2, n3: int
        Node identification number.
    init_k_KC0, init_k_KG, init_k_M : int
        Position in the arrays storing the sparse data for the structural
        matrices.
    probe : :class:`.Tria3RProbe` object
        Pointer to the probe.

    """
    cdef public cINT eid
    cdef public cINT n1, n2, n3
    cdef public cINT c1, c2, c3
    cdef public cINT init_k_KC0, init_k_KG, init_k_M
    cdef public double area
    cdef public double alphat # drilling penalty factor for stiffness matrix, see Eq. 2.20 in F.M. Adam, A.E. Mohamed, A.E. Hassaballa, Degenerated Four Nodes Shell Element with Drilling Degree of Freedom, IOSR J. Eng. 3 (2013) 10–20. www.iosrjen.org (accessed April 20, 2020).
    cdef public double r11, r12, r13, r21, r22, r23, r31, r32, r33
    cdef public double m11, m12, m21, m22
    cdef public Tria3RProbe probe


    def __cinit__(Tria3R self, Tria3RProbe p):
        self.probe = p
        self.eid = -1
        self.n1 = -1
        self.n2 = -1
        self.n3 = -1
        self.c1 = -1
        self.c2 = -1
        self.c3 = -1
        self.init_k_KC0 = 0
        #self.init_k_KCNL = 0
        self.init_k_KG = 0
        self.init_k_M = 0
        self.area = 0
        self.alphat = 1. # based on recommended value of reference F.M. Adam, A.E. Mohamed, A.E. Hassaballa
        self.r11 = self.r12 = self.r13 = 0.
        self.r21 = self.r22 = self.r23 = 0.
        self.r31 = self.r32 = self.r33 = 0.
        self.m11 = 1.
        self.m12 = 0.
        self.m21 = 0.
        self.m22 = 1.


    cpdef void update_rotation_matrix(Tria3R self, np.ndarray[cDOUBLE, ndim=1] x,
            double xmati=0., double xmatj=0., double xmatk=0.):
        r"""Update the rotation matrix of the element

        Attributes ``r11,r12,r13,r21,r22,r23,r31,r32,r33`` are updated,
        corresponding to the rotation matrix from local to global coordinates.

        The element coordinate system is determined, identifying the `ijk`
        components of each axis: `{x_e}_i, {x_e}_j, {x_e}_k`; `{y_e}_i,
        {y_e}_j, {y_e}_k`; `{z_e}_i, {z_e}_j, {z_e}_k`.

        The rotation matrix terms are calculated after solving 9 equations.

        Parameters
        ----------
        x : array-like
            Array with global nodal coordinates, for a total of `M` nodes in
            the model, this array will be arranged as: `x_1, y_1, z_1, x_2,
            y_2, z_2, ..., x_M, y_M, z_M`.

        xmati, xmatj, xmatk: array-like
            Vector in global coordinates representing the material direction.
            This vector is projected onto the plate element, thus becoming the
            material direction. The `ABD` matrix defining the constitutive
            behavior of the element is rotated from the material direction to
            the element `x` axis while calculating the stiffness matrices.

        """
        cdef double xi, xj, xk, yi, yj, yk, zi, zj, zk
        cdef double x1i, x1j, x1k, x2i, x2j, x2k, x3i, x3j, x3k
        cdef double v12i, v12j, v12k, v13i, v13j, v13k
        cdef double tmp, xmatnorm, ymati, ymatj, ymatk
        cdef double xmatglobi, xmatglobj, xmatglobk
        cdef double ymatglobi, ymatglobj, ymatglobk
        cdef double zmatglobi, zmatglobj, zmatglobk
        cdef double xeleglobi, xeleglobj, xeleglobk
        cdef double yeleglobi, yeleglobj, yeleglobk
        cdef double zeleglobi, zeleglobj, zeleglobk
        cdef double tol

        with nogil:
            x1i = x[self.c1//2 + 0]
            x1j = x[self.c1//2 + 1]
            x1k = x[self.c1//2 + 2]
            x2i = x[self.c2//2 + 0]
            x2j = x[self.c2//2 + 1]
            x2k = x[self.c2//2 + 2]
            x3i = x[self.c3//2 + 0]
            x3j = x[self.c3//2 + 1]
            x3k = x[self.c3//2 + 2]

            v12i = x2i - x1i
            v12j = x2j - x1j
            v12k = x2k - x1k
            v13i = x3i - x1i
            v13j = x3j - x1j
            v13k = x3k - x1k

            zi = v12j*v13k - v12k*v13j
            zj = -v12i*v13k + v12k*v13i
            zk = v12i*v13j - v12j*v13i
            tmp = (zi**2 + zj**2 + zk**2)**0.5
            zi /= tmp
            zj /= tmp
            zk /= tmp
            #NOTE defining tolerance to be 1/1e10 of normal vector norm
            tol = tmp/1e10

            xi = v12i
            xj = v12j
            xk = v12k
            tmp = (xi**2 + xj**2 + xk**2)**0.5
            xi /= tmp
            xj /= tmp
            xk /= tmp

            # y = z X x
            yi = zj*xk - zk*xj
            yj = zk*xi - zi*xk
            yk = zi*xj - zj*xi
            tmp = (yi**2 + yj**2 + yk**2)**0.5
            yi /= tmp
            yj /= tmp
            yk /= tmp

            tmp = xi*yj*zk - xi*yk*zj - xj*yi*zk + xj*yk*zi + xk*yi*zj - xk*yj*zi
            self.r11 = (yj*zk - yk*zj)/tmp
            self.r12 = (-xj*zk + xk*zj)/tmp
            self.r13 = (xj*yk - xk*yj)/tmp
            self.r21 = (-yi*zk + yk*zi)/tmp
            self.r22 = (xi*zk - xk*zi)/tmp
            self.r23 = (-xi*yk + xk*yi)/tmp
            self.r31 = (yi*zj - yj*zi)/tmp
            self.r32 = (-xi*zj + xj*zi)/tmp
            self.r33 = (xi*yj - xj*yi)/tmp

            xmatnorm = (xmati**2 + xmatj**2 + xmatk**2)**0.5
            xmati /= xmatnorm
            xmatj /= xmatnorm
            xmatk /= xmatnorm

            if xmatnorm > tol:
                # Project X Material Vector into Element CSYS
                # ymat = z X xmat
                ymati = zj*xmatk - zk*xmatj
                ymatj = zk*xmati - zi*xmatk
                ymatk = zi*xmatj - zj*xmati
                tmp = (ymati**2 + ymatj**2 + ymatk**2)**0.5
                ymati /= tmp
                ymatj /= tmp
                ymatk /= tmp
                if tmp > tol:
                    #NOTE ovewriting xmati,xmatj,xmatk, they now represent the projected xmat axis
                    # xmat_projected = ymat X z
                    xmati = ymatj*zk - ymatk*zj
                    xmatj = ymatk*zi - ymati*zk
                    xmatk = ymati*zj - ymatj*zi
                    tmp = (xmati**2 + xmatj**2 + xmatk**2)**0.5
                    xmati /= tmp
                    xmatj /= tmp
                    xmatk /= tmp

                    #NOTE angle between xmat_projected and xelem
                    #NOTE assuming they are already normalized (no need to normalize)
                    self.m11 = xmati*xi + xmatj*xj + xmatk*xk # costheta
                    self.m22 = self.m11
                    #NOTE sign of costheta
                    #     - the sign is positive when rotating from the material
                    #       to the element coordinate
                    #     - the sign only affects sintheta
                    # xmat dot_product y
                    if (xmati*yi + xmatj*yj + xmatk*yk) > 0:
                        self.m12 = -(1 - self.m11**2)**0.5 # sintheta
                        self.m21 = -self.m12
                    else:
                        #NOTE theta is negative
                        self.m12 = (1 - self.m11**2)**0.5 # sintheta
                        self.m21 = -self.m12


    cpdef void update_probe_ue(Tria3R self, np.ndarray[cDOUBLE, ndim=1] u):
        r"""Update the local displacement vector of the probe of the element

        .. note:: The ``probe`` attribute object :class:`.Tria3RProbe` is
                  updated, not the element object.

        Parameters
        ----------
        u : array-like
            Array with global displacements, for a total of `M` nodes in
            the model, this array will be arranged as: `u_1, v_1, w_1, {r_x}_1,
            {r_y}_1, {r_z}_1, u_2, v_2, w_2, {r_x}_2, {r_y}_2, {r_z}_2, ...,
            u_M, v_M, w_M, {r_x}_M, {r_y}_M, {r_z}_M`.

        """
        cdef int i, j
        cdef cINT c[4]
        cdef double s1[3]
        cdef double s2[3]
        cdef double s3[3]

        with nogil:
            # positions in the global stiffness matrix
            c[0] = self.c1
            c[1] = self.c2
            c[2] = self.c3

            # global to local transformation of displacements
            s1[0] = self.r11
            s1[1] = self.r21
            s1[2] = self.r31
            s2[0] = self.r12
            s2[1] = self.r22
            s2[2] = self.r32
            s3[0] = self.r13
            s3[1] = self.r23
            s3[2] = self.r33

            for j in range(NUM_NODES):
                for i in range(DOF):
                    self.probe.ue[j*DOF + i] = 0

            for j in range(NUM_NODES):
                for i in range(DOF//2):
                    #transforming translations
                    self.probe.ue[j*DOF + 0] += s1[i]*u[c[j] + 0 + i]
                    self.probe.ue[j*DOF + 1] += s2[i]*u[c[j] + 0 + i]
                    self.probe.ue[j*DOF + 2] += s3[i]*u[c[j] + 0 + i]
                    #transforming rotations
                    self.probe.ue[j*DOF + 3] += s1[i]*u[c[j] + 3 + i]
                    self.probe.ue[j*DOF + 4] += s2[i]*u[c[j] + 3 + i]
                    self.probe.ue[j*DOF + 5] += s3[i]*u[c[j] + 3 + i]


    cpdef void update_probe_xe(Tria3R self, np.ndarray[cDOUBLE, ndim=1] x):
        r"""Update the 3D coordinates of the probe of the element

        .. note:: The ``probe`` attribute object :class:`.Tria3RProbe` is
                  updated, not the element object.

        Parameters
        ----------
        x : array-like
            Array with global nodal coordinates, for a total of `M` nodes in
            the model, this array will be arranged as: `x_1, y_1, z_1, x_2,
            y_2, z_2, ..., x_M, y_M, z_M`.

        """
        cdef int i, j
        cdef cINT c[3]
        cdef double s1[3]
        cdef double s2[3]
        cdef double s3[3]

        with nogil:
            # positions in the global stiffness matrix
            c[0] = self.c1
            c[1] = self.c2
            c[2] = self.c3

            # global to local transformation of displacements
            s1[0] = self.r11
            s1[1] = self.r21
            s1[2] = self.r31
            s2[0] = self.r12
            s2[1] = self.r22
            s2[2] = self.r32
            s3[0] = self.r13
            s3[1] = self.r23
            s3[2] = self.r33

            for j in range(NUM_NODES):
                for i in range(DOF//2):
                    self.probe.xe[j*DOF//2 + i] = 0

            for j in range(NUM_NODES):
                for i in range(DOF//2):
                    self.probe.xe[j*DOF//2 + 0] += s1[i]*x[c[j]//2 + i]
                    self.probe.xe[j*DOF//2 + 1] += s2[i]*x[c[j]//2 + i]
                    self.probe.xe[j*DOF//2 + 2] += s3[i]*x[c[j]//2 + i]

        self.update_area()


    cpdef void update_area(Tria3R self):
        r"""Update element area

        """
        cdef double x1, x2, x3, y1, y2, y3
        with nogil:
            #NOTE ignoring z in local coordinates
            x1 = self.probe.xe[0]
            y1 = self.probe.xe[1]
            #z1 = self.probe.xe[2]
            x2 = self.probe.xe[3]
            y2 = self.probe.xe[4]
            #z2 = self.probe.xe[5]
            x3 = self.probe.xe[6]
            y3 = self.probe.xe[7]
            #z3 = self.probe.xe[8]
            self.area = fabs((x1 - x3)*(y2 - y3))/2. + fabs((-x2 + x3)*(y1 - y3))/2.


    cpdef void update_KC0(Tria3R self,
            np.ndarray[cINT, ndim=1] KC0r,
            np.ndarray[cINT, ndim=1] KC0c,
            np.ndarray[cDOUBLE, ndim=1] KC0v,
            ShellProp prop,
            int update_KC0v_only=0
            ):
        r"""Update sparse vectors for linear constitutive stiffness matrix KC0

        Reduced integration is used with a single point in the centroid
        (`N1=N2=N3=1/3`) and weight `weight=1`, preventing shear locking.
        Hourglass control is used according to Brockman 1987:

            Brockman, R. A., 1987, “Dynamics of the Bilinear Mindlin Plate
            Element,” Int. J. Numer. Methods Eng., 24(12), pp. 2343–2356.
            https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1620241208

        Drilling stiffness is used according to Adam et al. 2013:

            Adam, F. M., Mohamed, A. E., and Hassaballa, A. E., 2013,
            “Degenerated Four Nodes Shell Element with Drilling Degree of
            Freedom,” IOSR J. Eng., 3(8), pp. 10–20.


        Properties
        ----------
        KC0r : np.array
            Array to store row positions of sparse values
        KC0c : np.array
            Array to store column positions of sparse values
        KC0v : np.array
            Array to store sparse values
        prop : :class:`ShellProp` object
            Shell property object from where the stiffness and mass attributes
            are read from.
        update_KC0v_only : int
            The default `0` means that only `KC0v` is updated. Any other value will
            lead to `KC0r` and `KC0c` also being updated.

        """
        cdef cINT c1, c2, c3, k
        cdef double x1, x2, x3, y1, y2, y3, wij, detJ, A
        #NOTE ABD in the material direction
        cdef double A11mat, A12mat, A16mat, A22mat, A26mat, A66mat
        cdef double B11mat, B12mat, B16mat, B22mat, B26mat, B66mat
        cdef double D11mat, D12mat, D16mat, D22mat, D26mat, D66mat
        cdef double E44, E45, E55
        #NOTE ABD in the element direction
        cdef double A11, A12, A16, A22, A26, A66
        cdef double B11, B12, B16, B22, B26, B66
        cdef double D11, D12, D16, D22, D26, D66
        cdef double alphat
        cdef double h
        cdef double r11, r12, r13, r21, r22, r23, r31, r32, r33
        cdef double m11, m12, m21, m22
        cdef double N1x, N2x, N3x, N1y, N2y, N3y
        cdef double N1, N2, N3

        with nogil:
            A = self.area
            detJ = 2*A

            A11mat = prop.A11
            A12mat = prop.A12
            A16mat = prop.A16
            A22mat = prop.A22
            A26mat = prop.A26
            A66mat = prop.A66
            B11mat = prop.B11
            B12mat = prop.B12
            B16mat = prop.B16
            B22mat = prop.B22
            B26mat = prop.B26
            B66mat = prop.B66
            D11mat = prop.D11
            D12mat = prop.D12
            D16mat = prop.D16
            D22mat = prop.D22
            D26mat = prop.D26
            D66mat = prop.D66

            #NOTE using self.m12 as a criterion to check if material
            #     coordinates were defined
            if self.m12 == 0:
                A11 = A11mat
                A12 = A12mat
                A16 = A16mat
                A22 = A22mat
                A26 = A26mat
                A66 = A66mat
                B11 = B11mat
                B12 = B12mat
                B16 = B16mat
                B22 = B22mat
                B26 = B26mat
                B66 = B66mat
                D11 = D11mat
                D12 = D12mat
                D16 = D16mat
                D22 = D22mat
                D26 = D26mat
                D66 = D66mat
            else:
                m11 = self.m11
                m12 = self.m12
                m21 = self.m21
                m22 = self.m22
                A11 = m11**2*(A11mat*m11**2 + A12mat*m12**2 + 2*A16mat*m11*m12) + 2*m11*m12*(A16mat*m11**2 + A26mat*m12**2 + 2*A66mat*m11*m12) + m12**2*(A12mat*m11**2 + A22mat*m12**2 + 2*A26mat*m11*m12)
                A12 = m21**2*(A11mat*m11**2 + A12mat*m12**2 + 2*A16mat*m11*m12) + 2*m21*m22*(A16mat*m11**2 + A26mat*m12**2 + 2*A66mat*m11*m12) + m22**2*(A12mat*m11**2 + A22mat*m12**2 + 2*A26mat*m11*m12)
                A16 = m11*m21*(A11mat*m11**2 + A12mat*m12**2 + 2*A16mat*m11*m12) + m12*m22*(A12mat*m11**2 + A22mat*m12**2 + 2*A26mat*m11*m12) + (m11*m22 + m12*m21)*(A16mat*m11**2 + A26mat*m12**2 + 2*A66mat*m11*m12)
                #A21 = m11**2*(A11mat*m21**2 + A12mat*m22**2 + 2*A16mat*m21*m22) + 2*m11*m12*(A16mat*m21**2 + A26mat*m22**2 + 2*A66mat*m21*m22) + m12**2*(A12mat*m21**2 + A22mat*m22**2 + 2*A26mat*m21*m22)
                A22 = m21**2*(A11mat*m21**2 + A12mat*m22**2 + 2*A16mat*m21*m22) + 2*m21*m22*(A16mat*m21**2 + A26mat*m22**2 + 2*A66mat*m21*m22) + m22**2*(A12mat*m21**2 + A22mat*m22**2 + 2*A26mat*m21*m22)
                A26 = m11*m21*(A11mat*m21**2 + A12mat*m22**2 + 2*A16mat*m21*m22) + m12*m22*(A12mat*m21**2 + A22mat*m22**2 + 2*A26mat*m21*m22) + (m11*m22 + m12*m21)*(A16mat*m21**2 + A26mat*m22**2 + 2*A66mat*m21*m22)
                #A61 = m11**2*(A11mat*m11*m21 + A12mat*m12*m22 + A16mat*(m11*m22 + m12*m21)) + 2*m11*m12*(A16mat*m11*m21 + A26mat*m12*m22 + A66mat*(m11*m22 + m12*m21)) + m12**2*(A12mat*m11*m21 + A22mat*m12*m22 + A26mat*(m11*m22 + m12*m21))
                #A62 = m21**2*(A11mat*m11*m21 + A12mat*m12*m22 + A16mat*(m11*m22 + m12*m21)) + 2*m21*m22*(A16mat*m11*m21 + A26mat*m12*m22 + A66mat*(m11*m22 + m12*m21)) + m22**2*(A12mat*m11*m21 + A22mat*m12*m22 + A26mat*(m11*m22 + m12*m21))
                A66 = m11*m21*(A11mat*m11*m21 + A12mat*m12*m22 + A16mat*(m11*m22 + m12*m21)) + m12*m22*(A12mat*m11*m21 + A22mat*m12*m22 + A26mat*(m11*m22 + m12*m21)) + (m11*m22 + m12*m21)*(A16mat*m11*m21 + A26mat*m12*m22 + A66mat*(m11*m22 + m12*m21))

                B11 = m11**2*(B11mat*m11**2 + B12mat*m12**2 + 2*B16mat*m11*m12) + 2*m11*m12*(B16mat*m11**2 + B26mat*m12**2 + 2*B66mat*m11*m12) + m12**2*(B12mat*m11**2 + B22mat*m12**2 + 2*B26mat*m11*m12)
                B12 = m21**2*(B11mat*m11**2 + B12mat*m12**2 + 2*B16mat*m11*m12) + 2*m21*m22*(B16mat*m11**2 + B26mat*m12**2 + 2*B66mat*m11*m12) + m22**2*(B12mat*m11**2 + B22mat*m12**2 + 2*B26mat*m11*m12)
                B16 = m11*m21*(B11mat*m11**2 + B12mat*m12**2 + 2*B16mat*m11*m12) + m12*m22*(B12mat*m11**2 + B22mat*m12**2 + 2*B26mat*m11*m12) + (m11*m22 + m12*m21)*(B16mat*m11**2 + B26mat*m12**2 + 2*B66mat*m11*m12)
                #B21 = m11**2*(B11mat*m21**2 + B12mat*m22**2 + 2*B16mat*m21*m22) + 2*m11*m12*(B16mat*m21**2 + B26mat*m22**2 + 2*B66mat*m21*m22) + m12**2*(B12mat*m21**2 + B22mat*m22**2 + 2*B26mat*m21*m22)
                B22 = m21**2*(B11mat*m21**2 + B12mat*m22**2 + 2*B16mat*m21*m22) + 2*m21*m22*(B16mat*m21**2 + B26mat*m22**2 + 2*B66mat*m21*m22) + m22**2*(B12mat*m21**2 + B22mat*m22**2 + 2*B26mat*m21*m22)
                B26 = m11*m21*(B11mat*m21**2 + B12mat*m22**2 + 2*B16mat*m21*m22) + m12*m22*(B12mat*m21**2 + B22mat*m22**2 + 2*B26mat*m21*m22) + (m11*m22 + m12*m21)*(B16mat*m21**2 + B26mat*m22**2 + 2*B66mat*m21*m22)
                #B61 = m11**2*(B11mat*m11*m21 + B12mat*m12*m22 + B16mat*(m11*m22 + m12*m21)) + 2*m11*m12*(B16mat*m11*m21 + B26mat*m12*m22 + B66mat*(m11*m22 + m12*m21)) + m12**2*(B12mat*m11*m21 + B22mat*m12*m22 + B26mat*(m11*m22 + m12*m21))
                #B62 = m21**2*(B11mat*m11*m21 + B12mat*m12*m22 + B16mat*(m11*m22 + m12*m21)) + 2*m21*m22*(B16mat*m11*m21 + B26mat*m12*m22 + B66mat*(m11*m22 + m12*m21)) + m22**2*(B12mat*m11*m21 + B22mat*m12*m22 + B26mat*(m11*m22 + m12*m21))
                B66 = m11*m21*(B11mat*m11*m21 + B12mat*m12*m22 + B16mat*(m11*m22 + m12*m21)) + m12*m22*(B12mat*m11*m21 + B22mat*m12*m22 + B26mat*(m11*m22 + m12*m21)) + (m11*m22 + m12*m21)*(B16mat*m11*m21 + B26mat*m12*m22 + B66mat*(m11*m22 + m12*m21))

                D11 = m11**2*(D11mat*m11**2 + D12mat*m12**2 + 2*D16mat*m11*m12) + 2*m11*m12*(D16mat*m11**2 + D26mat*m12**2 + 2*D66mat*m11*m12) + m12**2*(D12mat*m11**2 + D22mat*m12**2 + 2*D26mat*m11*m12)
                D12 = m21**2*(D11mat*m11**2 + D12mat*m12**2 + 2*D16mat*m11*m12) + 2*m21*m22*(D16mat*m11**2 + D26mat*m12**2 + 2*D66mat*m11*m12) + m22**2*(D12mat*m11**2 + D22mat*m12**2 + 2*D26mat*m11*m12)
                D16 = m11*m21*(D11mat*m11**2 + D12mat*m12**2 + 2*D16mat*m11*m12) + m12*m22*(D12mat*m11**2 + D22mat*m12**2 + 2*D26mat*m11*m12) + (m11*m22 + m12*m21)*(D16mat*m11**2 + D26mat*m12**2 + 2*D66mat*m11*m12)
                #D21 = m11**2*(D11mat*m21**2 + D12mat*m22**2 + 2*D16mat*m21*m22) + 2*m11*m12*(D16mat*m21**2 + D26mat*m22**2 + 2*D66mat*m21*m22) + m12**2*(D12mat*m21**2 + D22mat*m22**2 + 2*D26mat*m21*m22)
                D22 = m21**2*(D11mat*m21**2 + D12mat*m22**2 + 2*D16mat*m21*m22) + 2*m21*m22*(D16mat*m21**2 + D26mat*m22**2 + 2*D66mat*m21*m22) + m22**2*(D12mat*m21**2 + D22mat*m22**2 + 2*D26mat*m21*m22)
                D26 = m11*m21*(D11mat*m21**2 + D12mat*m22**2 + 2*D16mat*m21*m22) + m12*m22*(D12mat*m21**2 + D22mat*m22**2 + 2*D26mat*m21*m22) + (m11*m22 + m12*m21)*(D16mat*m21**2 + D26mat*m22**2 + 2*D66mat*m21*m22)
                #D61 = m11**2*(D11mat*m11*m21 + D12mat*m12*m22 + D16mat*(m11*m22 + m12*m21)) + 2*m11*m12*(D16mat*m11*m21 + D26mat*m12*m22 + D66mat*(m11*m22 + m12*m21)) + m12**2*(D12mat*m11*m21 + D22mat*m12*m22 + D26mat*(m11*m22 + m12*m21))
                #D62 = m21**2*(D11mat*m11*m21 + D12mat*m12*m22 + D16mat*(m11*m22 + m12*m21)) + 2*m21*m22*(D16mat*m11*m21 + D26mat*m12*m22 + D66mat*(m11*m22 + m12*m21)) + m22**2*(D12mat*m11*m21 + D22mat*m12*m22 + D26mat*(m11*m22 + m12*m21))
                D66 = m11*m21*(D11mat*m11*m21 + D12mat*m12*m22 + D16mat*(m11*m22 + m12*m21)) + m12*m22*(D12mat*m11*m21 + D22mat*m12*m22 + D26mat*(m11*m22 + m12*m21)) + (m11*m22 + m12*m21)*(D16mat*m11*m21 + D26mat*m12*m22 + D66mat*(m11*m22 + m12*m21))

            h = prop.h

            E44 = prop.E44*prop.scf_k23
            E45 = prop.E45*0.5*(prop.scf_k13 + prop.scf_k23)
            E55 = prop.E55*prop.scf_k13

            #NOTE ignoring z in local coordinates
            x1 = self.probe.xe[0]
            y1 = self.probe.xe[1]
            #z1 = self.probe.xe[2]
            x2 = self.probe.xe[3]
            y2 = self.probe.xe[4]
            #z2 = self.probe.xe[5]
            x3 = self.probe.xe[6]
            y3 = self.probe.xe[7]
            #z3 = self.probe.xe[8]

            #Local to global transformation
            r11 = self.r11
            r12 = self.r12
            r13 = self.r13
            r21 = self.r21
            r22 = self.r22
            r23 = self.r23
            r31 = self.r31
            r32 = self.r32
            r33 = self.r33

            if update_KC0v_only == 0:
                # positions in the global stiffness matrix
                c1 = self.c1
                c2 = self.c2
                c3 = self.c3

                k = self.init_k_KC0
                KC0r[k] = 0+c1
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 0+c1
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 1+c1
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 2+c1
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 3+c1
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 4+c1
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 5+c1
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 0+c2
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 1+c2
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 2+c2
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 3+c2
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 4+c2
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 5+c2
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 0+c3
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 1+c3
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 2+c3
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 3+c3
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 4+c3
                KC0c[k] = 5+c3
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 0+c1
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 1+c1
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 2+c1
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 3+c1
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 4+c1
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 5+c1
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 0+c2
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 1+c2
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 2+c2
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 3+c2
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 4+c2
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 5+c2
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 0+c3
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 1+c3
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 2+c3
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 3+c3
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 4+c3
                k += 1
                KC0r[k] = 5+c3
                KC0c[k] = 5+c3

            alphat = self.alphat

            #NOTE reduced integration to remove shear locking
            wij = 1.

            N1 = 0.333333333333333333333333333333333333333333333
            N2 = 0.333333333333333333333333333333333333333333333
            N3 = 0.333333333333333333333333333333333333333333333

            N1x = (y2 - y3)/(2*A)
            N2x = (-y1 + y3)/(2*A)
            N3x = (y1 - y2)/(2*A)
            N1y = (-x2 + x3)/(2*A)
            N2y = (x1 - x3)/(2*A)
            N3y = (-x1 + x2)/(2*A)

            k = self.init_k_KC0
            KC0v[k] += 2*A*r13**2*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r11*(2*A*r11*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r12*(2*A*r11*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r21*(2*A*r11*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r22*(2*A*r11*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r31*(2*A*r11*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r32*(2*A*r11*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r13*wij*(E44*N1y + E45*N1x) + 2*A*r11*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r12*(2*A*N1*r13*wij*(E45*N1y + E55*N1x) + 2*A*r11*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r13*(-1.0*A*A66*N1*N1x*alphat*r12*wij/h + 1.0*A*A66*N1*N1y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r13*wij*(E44*N1y + E45*N1x) + 2*A*r11*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r22*(2*A*N1*r13*wij*(E45*N1y + E55*N1x) + 2*A*r11*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r23*(-1.0*A*A66*N1*N1x*alphat*r12*wij/h + 1.0*A*A66*N1*N1y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r13*wij*(E44*N1y + E45*N1x) + 2*A*r11*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r32*(2*A*N1*r13*wij*(E45*N1y + E55*N1x) + 2*A*r11*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r33*(-1.0*A*A66*N1*N1x*alphat*r12*wij/h + 1.0*A*A66*N1*N1y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r11*(2*A*r11*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r12*(2*A*r11*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r21*(2*A*r11*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r22*(2*A*r11*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r31*(2*A*r11*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r32*(2*A*r11*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r13*wij*(E44*N1y + E45*N1x) + 2*A*r11*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r12*(2*A*N2*r13*wij*(E45*N1y + E55*N1x) + 2*A*r11*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r13*(-1.0*A*A66*N1x*N2*alphat*r12*wij/h + 1.0*A*A66*N1y*N2*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r13*wij*(E44*N1y + E45*N1x) + 2*A*r11*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r22*(2*A*N2*r13*wij*(E45*N1y + E55*N1x) + 2*A*r11*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r23*(-1.0*A*A66*N1x*N2*alphat*r12*wij/h + 1.0*A*A66*N1y*N2*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r13*wij*(E44*N1y + E45*N1x) + 2*A*r11*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r32*(2*A*N2*r13*wij*(E45*N1y + E55*N1x) + 2*A*r11*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r33*(-1.0*A*A66*N1x*N2*alphat*r12*wij/h + 1.0*A*A66*N1y*N2*alphat*r11*wij/h)
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r11*(2*A*r11*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r12*(2*A*r11*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r21*(2*A*r11*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r22*(2*A*r11*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r31*(2*A*r11*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r12*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r32*(2*A*r11*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r12*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(2*A*r11*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r13*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r12*(2*A*r11*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r13*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N1x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r11*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r13*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r22*(2*A*r11*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r13*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N1x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r11*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r12*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r13*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r32*(2*A*r11*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r12*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r13*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N1x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r11*(2*A*r21*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r12*(2*A*r21*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r21*(2*A*r21*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r22*(2*A*r21*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r31*(2*A*r21*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r32*(2*A*r21*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r23*wij*(E44*N1y + E45*N1x) + 2*A*r21*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r12*(2*A*N1*r23*wij*(E45*N1y + E55*N1x) + 2*A*r21*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r13*(-1.0*A*A66*N1*N1x*alphat*r22*wij/h + 1.0*A*A66*N1*N1y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r23*wij*(E44*N1y + E45*N1x) + 2*A*r21*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r22*(2*A*N1*r23*wij*(E45*N1y + E55*N1x) + 2*A*r21*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r23*(-1.0*A*A66*N1*N1x*alphat*r22*wij/h + 1.0*A*A66*N1*N1y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r23*wij*(E44*N1y + E45*N1x) + 2*A*r21*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r32*(2*A*N1*r23*wij*(E45*N1y + E55*N1x) + 2*A*r21*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r33*(-1.0*A*A66*N1*N1x*alphat*r22*wij/h + 1.0*A*A66*N1*N1y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r11*(2*A*r21*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r12*(2*A*r21*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r21*(2*A*r21*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r22*(2*A*r21*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r31*(2*A*r21*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r32*(2*A*r21*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r23*wij*(E44*N1y + E45*N1x) + 2*A*r21*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r12*(2*A*N2*r23*wij*(E45*N1y + E55*N1x) + 2*A*r21*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r13*(-1.0*A*A66*N1x*N2*alphat*r22*wij/h + 1.0*A*A66*N1y*N2*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r23*wij*(E44*N1y + E45*N1x) + 2*A*r21*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r22*(2*A*N2*r23*wij*(E45*N1y + E55*N1x) + 2*A*r21*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r23*(-1.0*A*A66*N1x*N2*alphat*r22*wij/h + 1.0*A*A66*N1y*N2*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r23*wij*(E44*N1y + E45*N1x) + 2*A*r21*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r32*(2*A*N2*r23*wij*(E45*N1y + E55*N1x) + 2*A*r21*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r33*(-1.0*A*A66*N1x*N2*alphat*r22*wij/h + 1.0*A*A66*N1y*N2*alphat*r21*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r11*(2*A*r21*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r12*(2*A*r21*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r21*(2*A*r21*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r22*(2*A*r21*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r31*(2*A*r21*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r22*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r32*(2*A*r21*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r22*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(2*A*r21*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r23*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r12*(2*A*r21*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r23*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N1x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r21*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r23*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r22*(2*A*r21*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r23*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N1x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r21*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r22*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r23*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r32*(2*A*r21*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r22*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r23*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N1x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r11*(2*A*r31*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r12*(2*A*r31*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r21*(2*A*r31*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r22*(2*A*r31*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N1x*(E45*N1y + E55*N1x) + N1y*(E44*N1y + E45*N1x)) + r31*(2*A*r31*wij*(0.25*A66*N1y**2*alphat/h + N1x*(A11*N1x + A16*N1y) + N1y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A12*N1y + A16*N1x) + N1y*(A26*N1y + A66*N1x))) + r32*(2*A*r31*wij*(-0.25*A66*N1x*N1y*alphat/h + N1x*(A16*N1x + A66*N1y) + N1y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x**2*alphat/h + N1x*(A26*N1y + A66*N1x) + N1y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r33*wij*(E44*N1y + E45*N1x) + 2*A*r31*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r12*(2*A*N1*r33*wij*(E45*N1y + E55*N1x) + 2*A*r31*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r13*(-1.0*A*A66*N1*N1x*alphat*r32*wij/h + 1.0*A*A66*N1*N1y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r33*wij*(E44*N1y + E45*N1x) + 2*A*r31*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r22*(2*A*N1*r33*wij*(E45*N1y + E55*N1x) + 2*A*r31*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r23*(-1.0*A*A66*N1*N1x*alphat*r32*wij/h + 1.0*A*A66*N1*N1y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r33*wij*(E44*N1y + E45*N1x) + 2*A*r31*wij*(-N1x*(B16*N1x + B66*N1y) - N1y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N1x*(B26*N1y + B66*N1x) - N1y*(B22*N1y + B26*N1x))) + r32*(2*A*N1*r33*wij*(E45*N1y + E55*N1x) + 2*A*r31*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N1x*(B12*N1y + B16*N1x) + N1y*(B26*N1y + B66*N1x))) + r33*(-1.0*A*A66*N1*N1x*alphat*r32*wij/h + 1.0*A*A66*N1*N1y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r11*(2*A*r31*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r12*(2*A*r31*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r21*(2*A*r31*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r22*(2*A*r31*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N2x*(E45*N1y + E55*N1x) + N2y*(E44*N1y + E45*N1x)) + r31*(2*A*r31*wij*(0.25*A66*N1y*N2y*alphat/h + N2x*(A11*N1x + A16*N1y) + N2y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N2y*alphat/h + N2x*(A12*N1y + A16*N1x) + N2y*(A26*N1y + A66*N1x))) + r32*(2*A*r31*wij*(-0.25*A66*N1y*N2x*alphat/h + N2x*(A16*N1x + A66*N1y) + N2y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x*N2x*alphat/h + N2x*(A26*N1y + A66*N1x) + N2y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r33*wij*(E44*N1y + E45*N1x) + 2*A*r31*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r12*(2*A*N2*r33*wij*(E45*N1y + E55*N1x) + 2*A*r31*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r13*(-1.0*A*A66*N1x*N2*alphat*r32*wij/h + 1.0*A*A66*N1y*N2*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r33*wij*(E44*N1y + E45*N1x) + 2*A*r31*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r22*(2*A*N2*r33*wij*(E45*N1y + E55*N1x) + 2*A*r31*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r23*(-1.0*A*A66*N1x*N2*alphat*r32*wij/h + 1.0*A*A66*N1y*N2*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r33*wij*(E44*N1y + E45*N1x) + 2*A*r31*wij*(-N2x*(B16*N1x + B66*N1y) - N2y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N2x*(B26*N1y + B66*N1x) - N2y*(B22*N1y + B26*N1x))) + r32*(2*A*N2*r33*wij*(E45*N1y + E55*N1x) + 2*A*r31*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N2x*(B12*N1y + B16*N1x) + N2y*(B26*N1y + B66*N1x))) + r33*(-1.0*A*A66*N1x*N2*alphat*r32*wij/h + 1.0*A*A66*N1y*N2*alphat*r31*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r11*(2*A*r31*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r12*(2*A*r31*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r21*(2*A*r31*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r22*(2*A*r31*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N3x*(E45*N1y + E55*N1x) + N3y*(E44*N1y + E45*N1x)) + r31*(2*A*r31*wij*(0.25*A66*N1y*N3y*alphat/h + N3x*(A11*N1x + A16*N1y) + N3y*(A16*N1x + A66*N1y)) + 2*A*r32*wij*(-0.25*A66*N1x*N3y*alphat/h + N3x*(A12*N1y + A16*N1x) + N3y*(A26*N1y + A66*N1x))) + r32*(2*A*r31*wij*(-0.25*A66*N1y*N3x*alphat/h + N3x*(A16*N1x + A66*N1y) + N3y*(A12*N1x + A26*N1y)) + 2*A*r32*wij*(0.25*A66*N1x*N3x*alphat/h + N3x*(A26*N1y + A66*N1x) + N3y*(A22*N1y + A26*N1x)))
            k += 1
            KC0v[k] += r11*(2*A*r31*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r33*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r12*(2*A*r31*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r33*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N1x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r31*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r33*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r22*(2*A*r31*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r33*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N1x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r31*wij*(-N3x*(B16*N1x + B66*N1y) - N3y*(B12*N1x + B26*N1y)) + 2*A*r32*wij*(-N3x*(B26*N1y + B66*N1x) - N3y*(B22*N1y + B26*N1x)) + 2*A*r33*wij*(E44*N1y + E45*N1x)*(N1 + N2 - 1)) + r32*(2*A*r31*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y)) + 2*A*r32*wij*(N3x*(B12*N1y + B16*N1x) + N3y*(B26*N1y + B66*N1x)) + 2*A*r33*wij*(E45*N1y + E55*N1x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N1x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N1y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N1y*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N1x*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r13*(2*A*r11*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r12*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N1y*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N1x*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r23*(2*A*r11*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r12*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N1y*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N1x*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r33*(2*A*r11*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r12*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r13**2*wij/h + r11*(2*A*r11*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r12*(2*A*r11*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r13*r23*wij/h + r21*(2*A*r11*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r22*(2*A*r11*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r13*r33*wij/h + r31*(2*A*r11*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r32*(2*A*r11*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N2y*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N2x*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r13*(2*A*r11*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r12*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N2y*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N2x*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r23*(2*A*r11*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r12*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N2y*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N2x*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r33*(2*A*r11*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r12*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13**2*wij/h + r11*(2*A*r11*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r12*(2*A*r11*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r23*wij/h + r21*(2*A*r11*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r22*(2*A*r11*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r33*wij/h + r31*(2*A*r11*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r32*(2*A*r11*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N3y*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N3x*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r13*(2*A*r11*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r12*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N3y*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N3x*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r23*(2*A*r11*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r12*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N3y*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r12*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N3x*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r12*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r33*(2*A*r11*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r12*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13**2*wij*(-N1 - N2 + 1)/h + r11*(2*A*r11*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r12*(2*A*r11*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r21*(2*A*r11*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r22*(2*A*r11*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r11*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r12*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r32*(2*A*r11*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r12*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N1y*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N1x*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r13*(2*A*r21*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r22*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N1y*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N1x*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r23*(2*A*r21*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r22*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N1y*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N1x*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r33*(2*A*r21*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r22*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r13*r23*wij/h + r11*(2*A*r21*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r12*(2*A*r21*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r23**2*wij/h + r21*(2*A*r21*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r22*(2*A*r21*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r23*r33*wij/h + r31*(2*A*r21*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r32*(2*A*r21*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N2y*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N2x*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r13*(2*A*r21*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r22*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N2y*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N2x*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r23*(2*A*r21*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r22*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N2y*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N2x*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r33*(2*A*r21*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r22*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r23*wij/h + r11*(2*A*r21*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r12*(2*A*r21*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r23**2*wij/h + r21*(2*A*r21*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r22*(2*A*r21*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r23*r33*wij/h + r31*(2*A*r21*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r32*(2*A*r21*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N3y*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N3x*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r13*(2*A*r21*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r22*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N3y*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N3x*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r23*(2*A*r21*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r22*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N3y*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r22*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N3x*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r22*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r33*(2*A*r21*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r22*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r11*(2*A*r21*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r12*(2*A*r21*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r23**2*wij*(-N1 - N2 + 1)/h + r21*(2*A*r21*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r22*(2*A*r21*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r21*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r22*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r32*(2*A*r21*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r22*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N1y*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N1x*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r13*(2*A*r31*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r32*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N1y*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N1x*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r23*(2*A*r31*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r32*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N1y*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B12*N1y - B16*N1x) + N1y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N1x*(B11*N1x + B16*N1y) + N1y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N1x*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B26*N1y - B66*N1x) + N1y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N1x*(B16*N1x + B66*N1y) + N1y*(B12*N1x + B26*N1y))) + r33*(2*A*r31*wij*(-E44*N1*N1y - E45*N1*N1x) + 2*A*r32*wij*(E45*N1*N1y + E55*N1*N1x))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r13*r33*wij/h + r11*(2*A*r31*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r12*(2*A*r31*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r23*r33*wij/h + r21*(2*A*r31*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r22*(2*A*r31*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1**2*alphat*r33**2*wij/h + r31*(2*A*r31*wij*(E44*N1**2 - N1x*(-D26*N1y - D66*N1x) - N1y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(-E45*N1**2 - N1x*(D16*N1x + D66*N1y) - N1y*(D12*N1x + D26*N1y))) + r32*(2*A*r31*wij*(-E45*N1**2 + N1x*(-D12*N1y - D16*N1x) + N1y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1**2 + N1x*(D11*N1x + D16*N1y) + N1y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N2y*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N2x*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r13*(2*A*r31*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r32*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N2y*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N2x*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r23*(2*A*r31*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r32*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N2y*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B12*N1y - B16*N1x) + N2y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N2x*(B11*N1x + B16*N1y) + N2y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N2x*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B26*N1y - B66*N1x) + N2y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N2x*(B16*N1x + B66*N1y) + N2y*(B12*N1x + B26*N1y))) + r33*(2*A*r31*wij*(-E44*N1*N2y - E45*N1*N2x) + 2*A*r32*wij*(E45*N1*N2y + E55*N1*N2x))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r33*wij/h + r11*(2*A*r31*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r12*(2*A*r31*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r23*r33*wij/h + r21*(2*A*r31*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r22*(2*A*r31*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r33**2*wij/h + r31*(2*A*r31*wij*(E44*N1*N2 - N2x*(-D26*N1y - D66*N1x) - N2y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(-E45*N1*N2 - N2x*(D16*N1x + D66*N1y) - N2y*(D12*N1x + D26*N1y))) + r32*(2*A*r31*wij*(-E45*N1*N2 + N2x*(-D12*N1y - D16*N1x) + N2y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1*N2 + N2x*(D11*N1x + D16*N1y) + N2y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1*N3y*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r12*(-1.0*A*A66*N1*N3x*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r13*(2*A*r31*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r32*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1*N3y*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r22*(-1.0*A*A66*N1*N3x*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r23*(2*A*r31*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r32*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1*N3y*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B12*N1y - B16*N1x) + N3y*(-B26*N1y - B66*N1x)) + 2*A*r32*wij*(N3x*(B11*N1x + B16*N1y) + N3y*(B16*N1x + B66*N1y))) + r32*(-1.0*A*A66*N1*N3x*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B26*N1y - B66*N1x) + N3y*(-B22*N1y - B26*N1x)) + 2*A*r32*wij*(N3x*(B16*N1x + B66*N1y) + N3y*(B12*N1x + B26*N1y))) + r33*(2*A*r31*wij*(-E44*N1*N3y - E45*N1*N3x) + 2*A*r32*wij*(E45*N1*N3y + E55*N1*N3x))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r11*(2*A*r31*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r12*(2*A*r31*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r21*(2*A*r31*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r22*(2*A*r31*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r33**2*wij*(-N1 - N2 + 1)/h + r31*(2*A*r31*wij*(-E44*N1*(N1 + N2 - 1) - N3x*(-D26*N1y - D66*N1x) - N3y*(-D22*N1y - D26*N1x)) + 2*A*r32*wij*(E45*N1*(N1 + N2 - 1) - N3x*(D16*N1x + D66*N1y) - N3y*(D12*N1x + D26*N1y))) + r32*(2*A*r31*wij*(-E45*N1*(-N1 - N2 + 1) + N3x*(-D12*N1y - D16*N1x) + N3y*(-D26*N1y - D66*N1x)) + 2*A*r32*wij*(E55*N1*(-N1 - N2 + 1) + N3x*(D11*N1x + D16*N1y) + N3y*(D16*N1x + D66*N1y)))
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r11*(2*A*r11*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r12*(2*A*r11*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r21*(2*A*r11*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r22*(2*A*r11*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r31*(2*A*r11*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r32*(2*A*r11*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r13*wij*(E44*N2y + E45*N2x) + 2*A*r11*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r12*(2*A*N1*r13*wij*(E45*N2y + E55*N2x) + 2*A*r11*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r13*(-1.0*A*A66*N1*N2x*alphat*r12*wij/h + 1.0*A*A66*N1*N2y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r13*wij*(E44*N2y + E45*N2x) + 2*A*r11*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r22*(2*A*N1*r13*wij*(E45*N2y + E55*N2x) + 2*A*r11*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r23*(-1.0*A*A66*N1*N2x*alphat*r12*wij/h + 1.0*A*A66*N1*N2y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r13*wij*(E44*N2y + E45*N2x) + 2*A*r11*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r32*(2*A*N1*r13*wij*(E45*N2y + E55*N2x) + 2*A*r11*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r33*(-1.0*A*A66*N1*N2x*alphat*r12*wij/h + 1.0*A*A66*N1*N2y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r11*(2*A*r11*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r12*(2*A*r11*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r21*(2*A*r11*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r22*(2*A*r11*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r31*(2*A*r11*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r32*(2*A*r11*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r13*wij*(E44*N2y + E45*N2x) + 2*A*r11*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r12*(2*A*N2*r13*wij*(E45*N2y + E55*N2x) + 2*A*r11*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r13*(-1.0*A*A66*N2*N2x*alphat*r12*wij/h + 1.0*A*A66*N2*N2y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r13*wij*(E44*N2y + E45*N2x) + 2*A*r11*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r22*(2*A*N2*r13*wij*(E45*N2y + E55*N2x) + 2*A*r11*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r23*(-1.0*A*A66*N2*N2x*alphat*r12*wij/h + 1.0*A*A66*N2*N2y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r13*wij*(E44*N2y + E45*N2x) + 2*A*r11*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r32*(2*A*N2*r13*wij*(E45*N2y + E55*N2x) + 2*A*r11*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r33*(-1.0*A*A66*N2*N2x*alphat*r12*wij/h + 1.0*A*A66*N2*N2y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r11*(2*A*r11*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r12*(2*A*r11*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r21*(2*A*r11*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r22*(2*A*r11*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r31*(2*A*r11*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r12*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r32*(2*A*r11*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r12*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(2*A*r11*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r13*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r12*(2*A*r11*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r13*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N2x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r11*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r13*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r22*(2*A*r11*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r13*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N2x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r11*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r12*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r13*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r32*(2*A*r11*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r12*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r13*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N2x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r11*(2*A*r21*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r12*(2*A*r21*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r21*(2*A*r21*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r22*(2*A*r21*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r31*(2*A*r21*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r32*(2*A*r21*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r23*wij*(E44*N2y + E45*N2x) + 2*A*r21*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r12*(2*A*N1*r23*wij*(E45*N2y + E55*N2x) + 2*A*r21*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r13*(-1.0*A*A66*N1*N2x*alphat*r22*wij/h + 1.0*A*A66*N1*N2y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r23*wij*(E44*N2y + E45*N2x) + 2*A*r21*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r22*(2*A*N1*r23*wij*(E45*N2y + E55*N2x) + 2*A*r21*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r23*(-1.0*A*A66*N1*N2x*alphat*r22*wij/h + 1.0*A*A66*N1*N2y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r23*wij*(E44*N2y + E45*N2x) + 2*A*r21*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r32*(2*A*N1*r23*wij*(E45*N2y + E55*N2x) + 2*A*r21*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r33*(-1.0*A*A66*N1*N2x*alphat*r22*wij/h + 1.0*A*A66*N1*N2y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r11*(2*A*r21*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r12*(2*A*r21*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r21*(2*A*r21*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r22*(2*A*r21*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r31*(2*A*r21*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r32*(2*A*r21*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r23*wij*(E44*N2y + E45*N2x) + 2*A*r21*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r12*(2*A*N2*r23*wij*(E45*N2y + E55*N2x) + 2*A*r21*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r13*(-1.0*A*A66*N2*N2x*alphat*r22*wij/h + 1.0*A*A66*N2*N2y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r23*wij*(E44*N2y + E45*N2x) + 2*A*r21*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r22*(2*A*N2*r23*wij*(E45*N2y + E55*N2x) + 2*A*r21*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r23*(-1.0*A*A66*N2*N2x*alphat*r22*wij/h + 1.0*A*A66*N2*N2y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r23*wij*(E44*N2y + E45*N2x) + 2*A*r21*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r32*(2*A*N2*r23*wij*(E45*N2y + E55*N2x) + 2*A*r21*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r33*(-1.0*A*A66*N2*N2x*alphat*r22*wij/h + 1.0*A*A66*N2*N2y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r11*(2*A*r21*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r12*(2*A*r21*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r21*(2*A*r21*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r22*(2*A*r21*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r31*(2*A*r21*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r22*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r32*(2*A*r21*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r22*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(2*A*r21*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r23*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r12*(2*A*r21*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r23*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N2x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r21*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r23*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r22*(2*A*r21*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r23*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N2x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r21*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r22*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r23*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r32*(2*A*r21*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r22*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r23*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N2x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r11*(2*A*r31*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r12*(2*A*r31*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r21*(2*A*r31*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r22*(2*A*r31*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N1x*(E45*N2y + E55*N2x) + N1y*(E44*N2y + E45*N2x)) + r31*(2*A*r31*wij*(0.25*A66*N1y*N2y*alphat/h + N1x*(A11*N2x + A16*N2y) + N1y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N1y*N2x*alphat/h + N1x*(A12*N2y + A16*N2x) + N1y*(A26*N2y + A66*N2x))) + r32*(2*A*r31*wij*(-0.25*A66*N1x*N2y*alphat/h + N1x*(A16*N2x + A66*N2y) + N1y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N1x*N2x*alphat/h + N1x*(A26*N2y + A66*N2x) + N1y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r33*wij*(E44*N2y + E45*N2x) + 2*A*r31*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r12*(2*A*N1*r33*wij*(E45*N2y + E55*N2x) + 2*A*r31*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r13*(-1.0*A*A66*N1*N2x*alphat*r32*wij/h + 1.0*A*A66*N1*N2y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r33*wij*(E44*N2y + E45*N2x) + 2*A*r31*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r22*(2*A*N1*r33*wij*(E45*N2y + E55*N2x) + 2*A*r31*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r23*(-1.0*A*A66*N1*N2x*alphat*r32*wij/h + 1.0*A*A66*N1*N2y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r33*wij*(E44*N2y + E45*N2x) + 2*A*r31*wij*(-N1x*(B16*N2x + B66*N2y) - N1y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N1x*(B26*N2y + B66*N2x) - N1y*(B22*N2y + B26*N2x))) + r32*(2*A*N1*r33*wij*(E45*N2y + E55*N2x) + 2*A*r31*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N1x*(B12*N2y + B16*N2x) + N1y*(B26*N2y + B66*N2x))) + r33*(-1.0*A*A66*N1*N2x*alphat*r32*wij/h + 1.0*A*A66*N1*N2y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r11*(2*A*r31*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r12*(2*A*r31*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r21*(2*A*r31*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r22*(2*A*r31*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N2x*(E45*N2y + E55*N2x) + N2y*(E44*N2y + E45*N2x)) + r31*(2*A*r31*wij*(0.25*A66*N2y**2*alphat/h + N2x*(A11*N2x + A16*N2y) + N2y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A12*N2y + A16*N2x) + N2y*(A26*N2y + A66*N2x))) + r32*(2*A*r31*wij*(-0.25*A66*N2x*N2y*alphat/h + N2x*(A16*N2x + A66*N2y) + N2y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N2x**2*alphat/h + N2x*(A26*N2y + A66*N2x) + N2y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r33*wij*(E44*N2y + E45*N2x) + 2*A*r31*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r12*(2*A*N2*r33*wij*(E45*N2y + E55*N2x) + 2*A*r31*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r13*(-1.0*A*A66*N2*N2x*alphat*r32*wij/h + 1.0*A*A66*N2*N2y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r33*wij*(E44*N2y + E45*N2x) + 2*A*r31*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r22*(2*A*N2*r33*wij*(E45*N2y + E55*N2x) + 2*A*r31*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r23*(-1.0*A*A66*N2*N2x*alphat*r32*wij/h + 1.0*A*A66*N2*N2y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r33*wij*(E44*N2y + E45*N2x) + 2*A*r31*wij*(-N2x*(B16*N2x + B66*N2y) - N2y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N2x*(B26*N2y + B66*N2x) - N2y*(B22*N2y + B26*N2x))) + r32*(2*A*N2*r33*wij*(E45*N2y + E55*N2x) + 2*A*r31*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N2x*(B12*N2y + B16*N2x) + N2y*(B26*N2y + B66*N2x))) + r33*(-1.0*A*A66*N2*N2x*alphat*r32*wij/h + 1.0*A*A66*N2*N2y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r11*(2*A*r31*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r12*(2*A*r31*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r21*(2*A*r31*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r22*(2*A*r31*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N3x*(E45*N2y + E55*N2x) + N3y*(E44*N2y + E45*N2x)) + r31*(2*A*r31*wij*(0.25*A66*N2y*N3y*alphat/h + N3x*(A11*N2x + A16*N2y) + N3y*(A16*N2x + A66*N2y)) + 2*A*r32*wij*(-0.25*A66*N2x*N3y*alphat/h + N3x*(A12*N2y + A16*N2x) + N3y*(A26*N2y + A66*N2x))) + r32*(2*A*r31*wij*(-0.25*A66*N2y*N3x*alphat/h + N3x*(A16*N2x + A66*N2y) + N3y*(A12*N2x + A26*N2y)) + 2*A*r32*wij*(0.25*A66*N2x*N3x*alphat/h + N3x*(A26*N2y + A66*N2x) + N3y*(A22*N2y + A26*N2x)))
            k += 1
            KC0v[k] += r11*(2*A*r31*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r33*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r12*(2*A*r31*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r33*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N2x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r31*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r33*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r22*(2*A*r31*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r33*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N2x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r31*wij*(-N3x*(B16*N2x + B66*N2y) - N3y*(B12*N2x + B26*N2y)) + 2*A*r32*wij*(-N3x*(B26*N2y + B66*N2x) - N3y*(B22*N2y + B26*N2x)) + 2*A*r33*wij*(E44*N2y + E45*N2x)*(N1 + N2 - 1)) + r32*(2*A*r31*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y)) + 2*A*r32*wij*(N3x*(B12*N2y + B16*N2x) + N3y*(B26*N2y + B66*N2x)) + 2*A*r33*wij*(E45*N2y + E55*N2x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N2x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N2y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1y*N2*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N1x*N2*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r13*(2*A*r11*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r12*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1y*N2*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N1x*N2*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r23*(2*A*r11*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r12*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1y*N2*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N1x*N2*alphat*r13*wij/h + 2*A*r11*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r33*(2*A*r11*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r12*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13**2*wij/h + r11*(2*A*r11*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r12*(2*A*r11*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r23*wij/h + r21*(2*A*r11*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r22*(2*A*r11*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r33*wij/h + r31*(2*A*r11*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r32*(2*A*r11*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2*N2y*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N2*N2x*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r13*(2*A*r11*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r12*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2*N2y*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N2*N2x*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r23*(2*A*r11*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r12*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2*N2y*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N2*N2x*alphat*r13*wij/h + 2*A*r11*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r33*(2*A*r11*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r12*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r13**2*wij/h + r11*(2*A*r11*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r12*(2*A*r11*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r13*r23*wij/h + r21*(2*A*r11*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r22*(2*A*r11*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r13*r33*wij/h + r31*(2*A*r11*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r32*(2*A*r11*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2*N3y*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N2*N3x*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r13*(2*A*r11*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r12*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2*N3y*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N2*N3x*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r23*(2*A*r11*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r12*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2*N3y*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r12*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N2*N3x*alphat*r13*wij/h + 2*A*r11*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r12*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r33*(2*A*r11*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r12*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13**2*wij*(-N1 - N2 + 1)/h + r11*(2*A*r11*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r12*(2*A*r11*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r21*(2*A*r11*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r22*(2*A*r11*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r11*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r12*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r32*(2*A*r11*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r12*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1y*N2*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N1x*N2*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r13*(2*A*r21*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r22*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1y*N2*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N1x*N2*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r23*(2*A*r21*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r22*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1y*N2*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N1x*N2*alphat*r23*wij/h + 2*A*r21*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r33*(2*A*r21*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r22*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r23*wij/h + r11*(2*A*r21*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r12*(2*A*r21*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r23**2*wij/h + r21*(2*A*r21*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r22*(2*A*r21*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r23*r33*wij/h + r31*(2*A*r21*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r32*(2*A*r21*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2*N2y*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N2*N2x*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r13*(2*A*r21*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r22*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2*N2y*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N2*N2x*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r23*(2*A*r21*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r22*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2*N2y*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N2*N2x*alphat*r23*wij/h + 2*A*r21*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r33*(2*A*r21*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r22*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r13*r23*wij/h + r11*(2*A*r21*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r12*(2*A*r21*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r23**2*wij/h + r21*(2*A*r21*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r22*(2*A*r21*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r23*r33*wij/h + r31*(2*A*r21*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r32*(2*A*r21*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2*N3y*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N2*N3x*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r13*(2*A*r21*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r22*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2*N3y*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N2*N3x*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r23*(2*A*r21*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r22*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2*N3y*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r22*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N2*N3x*alphat*r23*wij/h + 2*A*r21*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r22*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r33*(2*A*r21*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r22*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r11*(2*A*r21*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r12*(2*A*r21*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r23**2*wij*(-N1 - N2 + 1)/h + r21*(2*A*r21*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r22*(2*A*r21*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r21*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r22*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r32*(2*A*r21*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r22*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1y*N2*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N1x*N2*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r13*(2*A*r31*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r32*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1y*N2*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N1x*N2*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r23*(2*A*r31*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r32*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1y*N2*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B12*N2y - B16*N2x) + N1y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N1x*(B11*N2x + B16*N2y) + N1y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N1x*N2*alphat*r33*wij/h + 2*A*r31*wij*(N1x*(-B26*N2y - B66*N2x) + N1y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N1x*(B16*N2x + B66*N2y) + N1y*(B12*N2x + B26*N2y))) + r33*(2*A*r31*wij*(-E44*N1y*N2 - E45*N1x*N2) + 2*A*r32*wij*(E45*N1y*N2 + E55*N1x*N2))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r13*r33*wij/h + r11*(2*A*r31*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r12*(2*A*r31*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r23*r33*wij/h + r21*(2*A*r31*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r22*(2*A*r31*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*N2*alphat*r33**2*wij/h + r31*(2*A*r31*wij*(E44*N1*N2 - N1x*(-D26*N2y - D66*N2x) - N1y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(-E45*N1*N2 - N1x*(D16*N2x + D66*N2y) - N1y*(D12*N2x + D26*N2y))) + r32*(2*A*r31*wij*(-E45*N1*N2 + N1x*(-D12*N2y - D16*N2x) + N1y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N1*N2 + N1x*(D11*N2x + D16*N2y) + N1y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2*N2y*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N2*N2x*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r13*(2*A*r31*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r32*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2*N2y*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N2*N2x*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r23*(2*A*r31*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r32*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2*N2y*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B12*N2y - B16*N2x) + N2y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N2x*(B11*N2x + B16*N2y) + N2y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N2*N2x*alphat*r33*wij/h + 2*A*r31*wij*(N2x*(-B26*N2y - B66*N2x) + N2y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N2x*(B16*N2x + B66*N2y) + N2y*(B12*N2x + B26*N2y))) + r33*(2*A*r31*wij*(-E44*N2*N2y - E45*N2*N2x) + 2*A*r32*wij*(E45*N2*N2y + E55*N2*N2x))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r13*r33*wij/h + r11*(2*A*r31*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r12*(2*A*r31*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r23*r33*wij/h + r21*(2*A*r31*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r22*(2*A*r31*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2**2*alphat*r33**2*wij/h + r31*(2*A*r31*wij*(E44*N2**2 - N2x*(-D26*N2y - D66*N2x) - N2y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(-E45*N2**2 - N2x*(D16*N2x + D66*N2y) - N2y*(D12*N2x + D26*N2y))) + r32*(2*A*r31*wij*(-E45*N2**2 + N2x*(-D12*N2y - D16*N2x) + N2y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N2**2 + N2x*(D11*N2x + D16*N2y) + N2y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2*N3y*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r12*(-1.0*A*A66*N2*N3x*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r13*(2*A*r31*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r32*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2*N3y*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r22*(-1.0*A*A66*N2*N3x*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r23*(2*A*r31*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r32*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2*N3y*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B12*N2y - B16*N2x) + N3y*(-B26*N2y - B66*N2x)) + 2*A*r32*wij*(N3x*(B11*N2x + B16*N2y) + N3y*(B16*N2x + B66*N2y))) + r32*(-1.0*A*A66*N2*N3x*alphat*r33*wij/h + 2*A*r31*wij*(N3x*(-B26*N2y - B66*N2x) + N3y*(-B22*N2y - B26*N2x)) + 2*A*r32*wij*(N3x*(B16*N2x + B66*N2y) + N3y*(B12*N2x + B26*N2y))) + r33*(2*A*r31*wij*(-E44*N2*N3y - E45*N2*N3x) + 2*A*r32*wij*(E45*N2*N3y + E55*N2*N3x))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r11*(2*A*r31*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r12*(2*A*r31*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r21*(2*A*r31*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r22*(2*A*r31*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r33**2*wij*(-N1 - N2 + 1)/h + r31*(2*A*r31*wij*(-E44*N2*(N1 + N2 - 1) - N3x*(-D26*N2y - D66*N2x) - N3y*(-D22*N2y - D26*N2x)) + 2*A*r32*wij*(E45*N2*(N1 + N2 - 1) - N3x*(D16*N2x + D66*N2y) - N3y*(D12*N2x + D26*N2y))) + r32*(2*A*r31*wij*(-E45*N2*(-N1 - N2 + 1) + N3x*(-D12*N2y - D16*N2x) + N3y*(-D26*N2y - D66*N2x)) + 2*A*r32*wij*(E55*N2*(-N1 - N2 + 1) + N3x*(D11*N2x + D16*N2y) + N3y*(D16*N2x + D66*N2y)))
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r11*(2*A*r11*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r12*(2*A*r11*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r21*(2*A*r11*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r22*(2*A*r11*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r31*(2*A*r11*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r32*(2*A*r11*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r13*wij*(E44*N3y + E45*N3x) + 2*A*r11*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r12*(2*A*N1*r13*wij*(E45*N3y + E55*N3x) + 2*A*r11*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r13*(-1.0*A*A66*N1*N3x*alphat*r12*wij/h + 1.0*A*A66*N1*N3y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r13*wij*(E44*N3y + E45*N3x) + 2*A*r11*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r22*(2*A*N1*r13*wij*(E45*N3y + E55*N3x) + 2*A*r11*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r23*(-1.0*A*A66*N1*N3x*alphat*r12*wij/h + 1.0*A*A66*N1*N3y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r13*wij*(E44*N3y + E45*N3x) + 2*A*r11*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r32*(2*A*N1*r13*wij*(E45*N3y + E55*N3x) + 2*A*r11*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r33*(-1.0*A*A66*N1*N3x*alphat*r12*wij/h + 1.0*A*A66*N1*N3y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r11*(2*A*r11*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r12*(2*A*r11*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r21*(2*A*r11*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r22*(2*A*r11*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r31*(2*A*r11*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r32*(2*A*r11*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r13*wij*(E44*N3y + E45*N3x) + 2*A*r11*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r12*(2*A*N2*r13*wij*(E45*N3y + E55*N3x) + 2*A*r11*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r13*(-1.0*A*A66*N2*N3x*alphat*r12*wij/h + 1.0*A*A66*N2*N3y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r13*wij*(E44*N3y + E45*N3x) + 2*A*r11*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r22*(2*A*N2*r13*wij*(E45*N3y + E55*N3x) + 2*A*r11*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r23*(-1.0*A*A66*N2*N3x*alphat*r12*wij/h + 1.0*A*A66*N2*N3y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r13*wij*(E44*N3y + E45*N3x) + 2*A*r11*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r32*(2*A*N2*r13*wij*(E45*N3y + E55*N3x) + 2*A*r11*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r33*(-1.0*A*A66*N2*N3x*alphat*r12*wij/h + 1.0*A*A66*N2*N3y*alphat*r11*wij/h)
            k += 1
            KC0v[k] += 2*A*r13**2*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r11*(2*A*r11*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r12*(2*A*r11*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r21*(2*A*r11*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r22*(2*A*r11*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r31*(2*A*r11*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r12*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r32*(2*A*r11*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r12*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(2*A*r11*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r13*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r12*(2*A*r11*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r13*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N3x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r11*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r13*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r22*(2*A*r11*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r13*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N3x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r11*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r12*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r13*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r32*(2*A*r11*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r12*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r13*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N3x*alphat*r12*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r11*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r11*(2*A*r21*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r12*(2*A*r21*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r21*(2*A*r21*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r22*(2*A*r21*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r31*(2*A*r21*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r32*(2*A*r21*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r23*wij*(E44*N3y + E45*N3x) + 2*A*r21*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r12*(2*A*N1*r23*wij*(E45*N3y + E55*N3x) + 2*A*r21*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r13*(-1.0*A*A66*N1*N3x*alphat*r22*wij/h + 1.0*A*A66*N1*N3y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r23*wij*(E44*N3y + E45*N3x) + 2*A*r21*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r22*(2*A*N1*r23*wij*(E45*N3y + E55*N3x) + 2*A*r21*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r23*(-1.0*A*A66*N1*N3x*alphat*r22*wij/h + 1.0*A*A66*N1*N3y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r23*wij*(E44*N3y + E45*N3x) + 2*A*r21*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r32*(2*A*N1*r23*wij*(E45*N3y + E55*N3x) + 2*A*r21*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r33*(-1.0*A*A66*N1*N3x*alphat*r22*wij/h + 1.0*A*A66*N1*N3y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r11*(2*A*r21*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r12*(2*A*r21*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r21*(2*A*r21*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r22*(2*A*r21*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r31*(2*A*r21*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r32*(2*A*r21*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r23*wij*(E44*N3y + E45*N3x) + 2*A*r21*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r12*(2*A*N2*r23*wij*(E45*N3y + E55*N3x) + 2*A*r21*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r13*(-1.0*A*A66*N2*N3x*alphat*r22*wij/h + 1.0*A*A66*N2*N3y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r23*wij*(E44*N3y + E45*N3x) + 2*A*r21*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r22*(2*A*N2*r23*wij*(E45*N3y + E55*N3x) + 2*A*r21*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r23*(-1.0*A*A66*N2*N3x*alphat*r22*wij/h + 1.0*A*A66*N2*N3y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r23*wij*(E44*N3y + E45*N3x) + 2*A*r21*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r32*(2*A*N2*r23*wij*(E45*N3y + E55*N3x) + 2*A*r21*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r33*(-1.0*A*A66*N2*N3x*alphat*r22*wij/h + 1.0*A*A66*N2*N3y*alphat*r21*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r23*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r11*(2*A*r21*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r12*(2*A*r21*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23**2*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r21*(2*A*r21*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r22*(2*A*r21*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r31*(2*A*r21*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r22*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r32*(2*A*r21*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r22*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(2*A*r21*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r23*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r12*(2*A*r21*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r23*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N3x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r21*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r23*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r22*(2*A*r21*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r23*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N3x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r21*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r22*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r23*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r32*(2*A*r21*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r22*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r23*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N3x*alphat*r22*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r21*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r11*(2*A*r31*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r12*(2*A*r31*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r21*(2*A*r31*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r22*(2*A*r31*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N1x*(E45*N3y + E55*N3x) + N1y*(E44*N3y + E45*N3x)) + r31*(2*A*r31*wij*(0.25*A66*N1y*N3y*alphat/h + N1x*(A11*N3x + A16*N3y) + N1y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N1y*N3x*alphat/h + N1x*(A12*N3y + A16*N3x) + N1y*(A26*N3y + A66*N3x))) + r32*(2*A*r31*wij*(-0.25*A66*N1x*N3y*alphat/h + N1x*(A16*N3x + A66*N3y) + N1y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N1x*N3x*alphat/h + N1x*(A26*N3y + A66*N3x) + N1y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(-2*A*N1*r33*wij*(E44*N3y + E45*N3x) + 2*A*r31*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r12*(2*A*N1*r33*wij*(E45*N3y + E55*N3x) + 2*A*r31*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r13*(-1.0*A*A66*N1*N3x*alphat*r32*wij/h + 1.0*A*A66*N1*N3y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N1*r33*wij*(E44*N3y + E45*N3x) + 2*A*r31*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r22*(2*A*N1*r33*wij*(E45*N3y + E55*N3x) + 2*A*r31*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r23*(-1.0*A*A66*N1*N3x*alphat*r32*wij/h + 1.0*A*A66*N1*N3y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N1*r33*wij*(E44*N3y + E45*N3x) + 2*A*r31*wij*(-N1x*(B16*N3x + B66*N3y) - N1y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N1x*(B26*N3y + B66*N3x) - N1y*(B22*N3y + B26*N3x))) + r32*(2*A*N1*r33*wij*(E45*N3y + E55*N3x) + 2*A*r31*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N1x*(B12*N3y + B16*N3x) + N1y*(B26*N3y + B66*N3x))) + r33*(-1.0*A*A66*N1*N3x*alphat*r32*wij/h + 1.0*A*A66*N1*N3y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r11*(2*A*r31*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r12*(2*A*r31*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r21*(2*A*r31*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r22*(2*A*r31*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N2x*(E45*N3y + E55*N3x) + N2y*(E44*N3y + E45*N3x)) + r31*(2*A*r31*wij*(0.25*A66*N2y*N3y*alphat/h + N2x*(A11*N3x + A16*N3y) + N2y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N2y*N3x*alphat/h + N2x*(A12*N3y + A16*N3x) + N2y*(A26*N3y + A66*N3x))) + r32*(2*A*r31*wij*(-0.25*A66*N2x*N3y*alphat/h + N2x*(A16*N3x + A66*N3y) + N2y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N2x*N3x*alphat/h + N2x*(A26*N3y + A66*N3x) + N2y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(-2*A*N2*r33*wij*(E44*N3y + E45*N3x) + 2*A*r31*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r12*(2*A*N2*r33*wij*(E45*N3y + E55*N3x) + 2*A*r31*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r13*(-1.0*A*A66*N2*N3x*alphat*r32*wij/h + 1.0*A*A66*N2*N3y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r21*(-2*A*N2*r33*wij*(E44*N3y + E45*N3x) + 2*A*r31*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r22*(2*A*N2*r33*wij*(E45*N3y + E55*N3x) + 2*A*r31*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r23*(-1.0*A*A66*N2*N3x*alphat*r32*wij/h + 1.0*A*A66*N2*N3y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += r31*(-2*A*N2*r33*wij*(E44*N3y + E45*N3x) + 2*A*r31*wij*(-N2x*(B16*N3x + B66*N3y) - N2y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N2x*(B26*N3y + B66*N3x) - N2y*(B22*N3y + B26*N3x))) + r32*(2*A*N2*r33*wij*(E45*N3y + E55*N3x) + 2*A*r31*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N2x*(B12*N3y + B16*N3x) + N2y*(B26*N3y + B66*N3x))) + r33*(-1.0*A*A66*N2*N3x*alphat*r32*wij/h + 1.0*A*A66*N2*N3y*alphat*r31*wij/h)
            k += 1
            KC0v[k] += 2*A*r13*r33*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r11*(2*A*r31*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r12*(2*A*r31*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r23*r33*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r21*(2*A*r31*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r22*(2*A*r31*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += 2*A*r33**2*wij*(N3x*(E45*N3y + E55*N3x) + N3y*(E44*N3y + E45*N3x)) + r31*(2*A*r31*wij*(0.25*A66*N3y**2*alphat/h + N3x*(A11*N3x + A16*N3y) + N3y*(A16*N3x + A66*N3y)) + 2*A*r32*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A12*N3y + A16*N3x) + N3y*(A26*N3y + A66*N3x))) + r32*(2*A*r31*wij*(-0.25*A66*N3x*N3y*alphat/h + N3x*(A16*N3x + A66*N3y) + N3y*(A12*N3x + A26*N3y)) + 2*A*r32*wij*(0.25*A66*N3x**2*alphat/h + N3x*(A26*N3y + A66*N3x) + N3y*(A22*N3y + A26*N3x)))
            k += 1
            KC0v[k] += r11*(2*A*r31*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r33*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r12*(2*A*r31*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r33*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r13*(-1.0*A*A66*N3x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r21*(2*A*r31*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r33*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r22*(2*A*r31*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r33*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r23*(-1.0*A*A66*N3x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r31*(2*A*r31*wij*(-N3x*(B16*N3x + B66*N3y) - N3y*(B12*N3x + B26*N3y)) + 2*A*r32*wij*(-N3x*(B26*N3y + B66*N3x) - N3y*(B22*N3y + B26*N3x)) + 2*A*r33*wij*(E44*N3y + E45*N3x)*(N1 + N2 - 1)) + r32*(2*A*r31*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y)) + 2*A*r32*wij*(N3x*(B12*N3y + B16*N3x) + N3y*(B26*N3y + B66*N3x)) + 2*A*r33*wij*(E45*N3y + E55*N3x)*(-N1 - N2 + 1)) + r33*(-1.0*A*A66*N3x*alphat*r32*wij*(-N1 - N2 + 1)/h + 1.0*A*A66*N3y*alphat*r31*wij*(-N1 - N2 + 1)/h)
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N1x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r13*(2*A*r11*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N1x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r23*(2*A*r11*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N1x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r33*(2*A*r11*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13**2*wij*(-N1 - N2 + 1)/h + r11*(2*A*r11*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r12*(2*A*r11*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r21*(2*A*r11*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r22*(2*A*r11*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r11*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r32*(2*A*r11*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N2x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r13*(2*A*r11*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N2x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r23*(2*A*r11*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N2x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r33*(2*A*r11*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13**2*wij*(-N1 - N2 + 1)/h + r11*(2*A*r11*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r12*(2*A*r11*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r21*(2*A*r11*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r22*(2*A*r11*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r11*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r32*(2*A*r11*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N3y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N3x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r13*(2*A*r11*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N3y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N3x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r23*(2*A*r11*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N3y*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r12*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N3x*alphat*r13*wij*(-N1 - N2 + 1)/h + 2*A*r11*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r12*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r33*(2*A*r11*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r12*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r13**2*wij*(-N1 - N2 + 1)**2/h + r11*(2*A*r11*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r12*(2*A*r11*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r13*r23*wij*(-N1 - N2 + 1)**2/h + r21*(2*A*r11*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r22*(2*A*r11*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r13*r33*wij*(-N1 - N2 + 1)**2/h + r31*(2*A*r11*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r12*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r32*(2*A*r11*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r12*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N1x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r13*(2*A*r21*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N1x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r23*(2*A*r21*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N1x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r33*(2*A*r21*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r11*(2*A*r21*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r12*(2*A*r21*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r23**2*wij*(-N1 - N2 + 1)/h + r21*(2*A*r21*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r22*(2*A*r21*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r21*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r32*(2*A*r21*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N2x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r13*(2*A*r21*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N2x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r23*(2*A*r21*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N2x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r33*(2*A*r21*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r23*wij*(-N1 - N2 + 1)/h + r11*(2*A*r21*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r12*(2*A*r21*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r23**2*wij*(-N1 - N2 + 1)/h + r21*(2*A*r21*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r22*(2*A*r21*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r31*(2*A*r21*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r32*(2*A*r21*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N3y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N3x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r13*(2*A*r21*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N3y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N3x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r23*(2*A*r21*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N3y*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r22*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N3x*alphat*r23*wij*(-N1 - N2 + 1)/h + 2*A*r21*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r22*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r33*(2*A*r21*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r22*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r13*r23*wij*(-N1 - N2 + 1)**2/h + r11*(2*A*r21*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r12*(2*A*r21*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r23**2*wij*(-N1 - N2 + 1)**2/h + r21*(2*A*r21*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r22*(2*A*r21*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r23*r33*wij*(-N1 - N2 + 1)**2/h + r31*(2*A*r21*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r22*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r32*(2*A*r21*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r22*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N1y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N1x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r13*(2*A*r31*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N1y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N1x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r23*(2*A*r31*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N1y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N1x*(-B12*N3y - B16*N3x) + N1y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N1x*(B11*N3x + B16*N3y) + N1y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N1x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N1x*(-B26*N3y - B66*N3x) + N1y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N1x*(B16*N3x + B66*N3y) + N1y*(B12*N3x + B26*N3y))) + r33*(2*A*r31*wij*(E44*N1y*(N1 + N2 - 1) + E45*N1x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N1y*(-N1 - N2 + 1) + E55*N1x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r11*(2*A*r31*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r12*(2*A*r31*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r21*(2*A*r31*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r22*(2*A*r31*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N1*alphat*r33**2*wij*(-N1 - N2 + 1)/h + r31*(2*A*r31*wij*(-E44*N1*(N1 + N2 - 1) - N1x*(-D26*N3y - D66*N3x) - N1y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(-E45*N1*(-N1 - N2 + 1) - N1x*(D16*N3x + D66*N3y) - N1y*(D12*N3x + D26*N3y))) + r32*(2*A*r31*wij*(E45*N1*(N1 + N2 - 1) + N1x*(-D12*N3y - D16*N3x) + N1y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*N1*(-N1 - N2 + 1) + N1x*(D11*N3x + D16*N3y) + N1y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N2y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N2x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r13*(2*A*r31*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N2y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N2x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r23*(2*A*r31*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N2y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N2x*(-B12*N3y - B16*N3x) + N2y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N2x*(B11*N3x + B16*N3y) + N2y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N2x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N2x*(-B26*N3y - B66*N3x) + N2y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N2x*(B16*N3x + B66*N3y) + N2y*(B12*N3x + B26*N3y))) + r33*(2*A*r31*wij*(E44*N2y*(N1 + N2 - 1) + E45*N2x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N2y*(-N1 - N2 + 1) + E55*N2x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r13*r33*wij*(-N1 - N2 + 1)/h + r11*(2*A*r31*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r12*(2*A*r31*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r23*r33*wij*(-N1 - N2 + 1)/h + r21*(2*A*r31*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r22*(2*A*r31*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*N2*alphat*r33**2*wij*(-N1 - N2 + 1)/h + r31*(2*A*r31*wij*(-E44*N2*(N1 + N2 - 1) - N2x*(-D26*N3y - D66*N3x) - N2y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(-E45*N2*(-N1 - N2 + 1) - N2x*(D16*N3x + D66*N3y) - N2y*(D12*N3x + D26*N3y))) + r32*(2*A*r31*wij*(E45*N2*(N1 + N2 - 1) + N2x*(-D12*N3y - D16*N3x) + N2y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*N2*(-N1 - N2 + 1) + N2x*(D11*N3x + D16*N3y) + N2y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += r11*(1.0*A*A66*N3y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r12*(-1.0*A*A66*N3x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r13*(2*A*r31*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r21*(1.0*A*A66*N3y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r22*(-1.0*A*A66*N3x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r23*(2*A*r31*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += r31*(1.0*A*A66*N3y*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N3x*(-B12*N3y - B16*N3x) + N3y*(-B26*N3y - B66*N3x)) + 2*A*r32*wij*(N3x*(B11*N3x + B16*N3y) + N3y*(B16*N3x + B66*N3y))) + r32*(-1.0*A*A66*N3x*alphat*r33*wij*(-N1 - N2 + 1)/h + 2*A*r31*wij*(N3x*(-B26*N3y - B66*N3x) + N3y*(-B22*N3y - B26*N3x)) + 2*A*r32*wij*(N3x*(B16*N3x + B66*N3y) + N3y*(B12*N3x + B26*N3y))) + r33*(2*A*r31*wij*(E44*N3y*(N1 + N2 - 1) + E45*N3x*(N1 + N2 - 1)) + 2*A*r32*wij*(E45*N3y*(-N1 - N2 + 1) + E55*N3x*(-N1 - N2 + 1)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r13*r33*wij*(-N1 - N2 + 1)**2/h + r11*(2*A*r31*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r12*(2*A*r31*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r23*r33*wij*(-N1 - N2 + 1)**2/h + r21*(2*A*r31*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r22*(2*A*r31*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))
            k += 1
            KC0v[k] += 2*A*A66*alphat*r33**2*wij*(-N1 - N2 + 1)**2/h + r31*(2*A*r31*wij*(E44*(N1 + N2 - 1)**2 - N3x*(-D26*N3y - D66*N3x) - N3y*(-D22*N3y - D26*N3x)) + 2*A*r32*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) - N3x*(D16*N3x + D66*N3y) - N3y*(D12*N3x + D26*N3y))) + r32*(2*A*r31*wij*(E45*(-N1 - N2 + 1)*(N1 + N2 - 1) + N3x*(-D12*N3y - D16*N3x) + N3y*(-D26*N3y - D66*N3x)) + 2*A*r32*wij*(E55*(-N1 - N2 + 1)**2 + N3x*(D11*N3x + D16*N3y) + N3y*(D16*N3x + D66*N3y)))



    cpdef void update_KG(Tria3R self,
            np.ndarray[cINT, ndim=1] KGr,
            np.ndarray[cINT, ndim=1] KGc,
            np.ndarray[cDOUBLE, ndim=1] KGv,
            ShellProp prop,
            int update_KGv_only=0
            ):
        r"""Update sparse vectors for geometric stiffness matrix KG

        Two-point Gauss-Legendre quadrature is used, which showed more accuracy
        for linear buckling load predictions.

        Before this function is called, the probe :class:`.Tria3RProbe`
        attribute of the :class:`Tria3R` object must be updated using
        :func:`.update_probe_ue` with the correct pre-buckling displacements;
        and :func:`.update_probe_xe` with the node coordinates.

        Properties
        ----------
        KGr : np.array
           Array to store row positions of sparse values
        KGc : np.array
           Array to store column positions of sparse values
        KGv : np.array
            Array to store sparse values
        prop : :class:`ShellProp` object
            Shell property object from where the stiffness and mass attributes
            are read from.
        update_KGv_only : int
            The default `0` means that only `KGv` is updated. Any other value will
            lead to `KGr` and `KGc` also being updated.

        """
        cdef double *ue
        cdef cINT c1, c2, c3, i, k
        cdef double x1, x2, x3
        cdef double y1, y2, y3
        cdef double wij, detJ, A
        cdef double points[3]
        #NOTE ABD in the material direction
        cdef double A11mat, A12mat, A16mat, A22mat, A26mat, A66mat
        cdef double B11mat, B12mat, B16mat, B22mat, B26mat, B66mat
        #NOTE ABD in the element direction
        cdef double A11, A12, A16, A22, A26, A66
        cdef double B11, B12, B16, B22, B26, B66
        cdef double r11, r12, r13, r21, r22, r23, r31, r32, r33
        cdef double m11, m12, m21, m22
        cdef double j11, j12, j21, j22
        cdef double N1, N2, N3
        cdef double N1x, N2x, N3x, N1y, N2y, N3y
        cdef double Nxx, Nyy, Nxy

        with nogil:
            A = self.area
            detJ = 2*A

            A11mat = prop.A11
            A12mat = prop.A12
            A16mat = prop.A16
            A22mat = prop.A22
            A26mat = prop.A26
            A66mat = prop.A66
            B11mat = prop.B11
            B12mat = prop.B12
            B16mat = prop.B16
            B22mat = prop.B22
            B26mat = prop.B26
            B66mat = prop.B66

            #NOTE using self.m12 as a criterion to check if material
            #     coordinates were defined
            if self.m12 == 0:
                A11 = A11mat
                A12 = A12mat
                A16 = A16mat
                A22 = A22mat
                A26 = A26mat
                A66 = A66mat
                B11 = B11mat
                B12 = B12mat
                B16 = B16mat
                B22 = B22mat
                B26 = B26mat
                B66 = B66mat
            else:
                m11 = self.m11
                m12 = self.m12
                m21 = self.m21
                m22 = self.m22
                A11 = m11**2*(A11mat*m11**2 + A12mat*m12**2 + 2*A16mat*m11*m12) + 2*m11*m12*(A16mat*m11**2 + A26mat*m12**2 + 2*A66mat*m11*m12) + m12**2*(A12mat*m11**2 + A22mat*m12**2 + 2*A26mat*m11*m12)
                A12 = m21**2*(A11mat*m11**2 + A12mat*m12**2 + 2*A16mat*m11*m12) + 2*m21*m22*(A16mat*m11**2 + A26mat*m12**2 + 2*A66mat*m11*m12) + m22**2*(A12mat*m11**2 + A22mat*m12**2 + 2*A26mat*m11*m12)
                A16 = m11*m21*(A11mat*m11**2 + A12mat*m12**2 + 2*A16mat*m11*m12) + m12*m22*(A12mat*m11**2 + A22mat*m12**2 + 2*A26mat*m11*m12) + (m11*m22 + m12*m21)*(A16mat*m11**2 + A26mat*m12**2 + 2*A66mat*m11*m12)
                #A21 = m11**2*(A11mat*m21**2 + A12mat*m22**2 + 2*A16mat*m21*m22) + 2*m11*m12*(A16mat*m21**2 + A26mat*m22**2 + 2*A66mat*m21*m22) + m12**2*(A12mat*m21**2 + A22mat*m22**2 + 2*A26mat*m21*m22)
                A22 = m21**2*(A11mat*m21**2 + A12mat*m22**2 + 2*A16mat*m21*m22) + 2*m21*m22*(A16mat*m21**2 + A26mat*m22**2 + 2*A66mat*m21*m22) + m22**2*(A12mat*m21**2 + A22mat*m22**2 + 2*A26mat*m21*m22)
                A26 = m11*m21*(A11mat*m21**2 + A12mat*m22**2 + 2*A16mat*m21*m22) + m12*m22*(A12mat*m21**2 + A22mat*m22**2 + 2*A26mat*m21*m22) + (m11*m22 + m12*m21)*(A16mat*m21**2 + A26mat*m22**2 + 2*A66mat*m21*m22)
                #A61 = m11**2*(A11mat*m11*m21 + A12mat*m12*m22 + A16mat*(m11*m22 + m12*m21)) + 2*m11*m12*(A16mat*m11*m21 + A26mat*m12*m22 + A66mat*(m11*m22 + m12*m21)) + m12**2*(A12mat*m11*m21 + A22mat*m12*m22 + A26mat*(m11*m22 + m12*m21))
                #A62 = m21**2*(A11mat*m11*m21 + A12mat*m12*m22 + A16mat*(m11*m22 + m12*m21)) + 2*m21*m22*(A16mat*m11*m21 + A26mat*m12*m22 + A66mat*(m11*m22 + m12*m21)) + m22**2*(A12mat*m11*m21 + A22mat*m12*m22 + A26mat*(m11*m22 + m12*m21))
                A66 = m11*m21*(A11mat*m11*m21 + A12mat*m12*m22 + A16mat*(m11*m22 + m12*m21)) + m12*m22*(A12mat*m11*m21 + A22mat*m12*m22 + A26mat*(m11*m22 + m12*m21)) + (m11*m22 + m12*m21)*(A16mat*m11*m21 + A26mat*m12*m22 + A66mat*(m11*m22 + m12*m21))

                B11 = m11**2*(B11mat*m11**2 + B12mat*m12**2 + 2*B16mat*m11*m12) + 2*m11*m12*(B16mat*m11**2 + B26mat*m12**2 + 2*B66mat*m11*m12) + m12**2*(B12mat*m11**2 + B22mat*m12**2 + 2*B26mat*m11*m12)
                B12 = m21**2*(B11mat*m11**2 + B12mat*m12**2 + 2*B16mat*m11*m12) + 2*m21*m22*(B16mat*m11**2 + B26mat*m12**2 + 2*B66mat*m11*m12) + m22**2*(B12mat*m11**2 + B22mat*m12**2 + 2*B26mat*m11*m12)
                B16 = m11*m21*(B11mat*m11**2 + B12mat*m12**2 + 2*B16mat*m11*m12) + m12*m22*(B12mat*m11**2 + B22mat*m12**2 + 2*B26mat*m11*m12) + (m11*m22 + m12*m21)*(B16mat*m11**2 + B26mat*m12**2 + 2*B66mat*m11*m12)
                #B21 = m11**2*(B11mat*m21**2 + B12mat*m22**2 + 2*B16mat*m21*m22) + 2*m11*m12*(B16mat*m21**2 + B26mat*m22**2 + 2*B66mat*m21*m22) + m12**2*(B12mat*m21**2 + B22mat*m22**2 + 2*B26mat*m21*m22)
                B22 = m21**2*(B11mat*m21**2 + B12mat*m22**2 + 2*B16mat*m21*m22) + 2*m21*m22*(B16mat*m21**2 + B26mat*m22**2 + 2*B66mat*m21*m22) + m22**2*(B12mat*m21**2 + B22mat*m22**2 + 2*B26mat*m21*m22)
                B26 = m11*m21*(B11mat*m21**2 + B12mat*m22**2 + 2*B16mat*m21*m22) + m12*m22*(B12mat*m21**2 + B22mat*m22**2 + 2*B26mat*m21*m22) + (m11*m22 + m12*m21)*(B16mat*m21**2 + B26mat*m22**2 + 2*B66mat*m21*m22)
                #B61 = m11**2*(B11mat*m11*m21 + B12mat*m12*m22 + B16mat*(m11*m22 + m12*m21)) + 2*m11*m12*(B16mat*m11*m21 + B26mat*m12*m22 + B66mat*(m11*m22 + m12*m21)) + m12**2*(B12mat*m11*m21 + B22mat*m12*m22 + B26mat*(m11*m22 + m12*m21))
                #B62 = m21**2*(B11mat*m11*m21 + B12mat*m12*m22 + B16mat*(m11*m22 + m12*m21)) + 2*m21*m22*(B16mat*m11*m21 + B26mat*m12*m22 + B66mat*(m11*m22 + m12*m21)) + m22**2*(B12mat*m11*m21 + B22mat*m12*m22 + B26mat*(m11*m22 + m12*m21))
                B66 = m11*m21*(B11mat*m11*m21 + B12mat*m12*m22 + B16mat*(m11*m22 + m12*m21)) + m12*m22*(B12mat*m11*m21 + B22mat*m12*m22 + B26mat*(m11*m22 + m12*m21)) + (m11*m22 + m12*m21)*(B16mat*m11*m21 + B26mat*m12*m22 + B66mat*(m11*m22 + m12*m21))

            #Local to global transformation
            r11 = self.r11
            r12 = self.r12
            r13 = self.r13
            r21 = self.r21
            r22 = self.r22
            r23 = self.r23
            r31 = self.r31
            r32 = self.r32
            r33 = self.r33

            #NOTE ignoring z in local coordinates
            x1 = self.probe.xe[0]
            y1 = self.probe.xe[1]
            #z1 = self.probe.xe[2]
            x2 = self.probe.xe[3]
            y2 = self.probe.xe[4]
            #z2 = self.probe.xe[5]
            x3 = self.probe.xe[6]
            y3 = self.probe.xe[7]
            #z3 = self.probe.xe[8]

            ue = &self.probe.ue[0]

            if update_KGv_only == 0:
                # positions of nodes 1,2,3,4 in the global matrix
                c1 = self.c1
                c2 = self.c2
                c3 = self.c3

                k = self.init_k_KG
                KGr[k] = 0+c1
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 2+c3

            #NOTE 3-point Gauss-Legendre quadrature for KG
            #GAUSSIAN QUADRATURE FORMULAS FOR TRIANGLES
            #G. R. COWPER
            #https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1620070316
            wij = 0.333333333333333333333333333333333333333333333
            points[0] = 0.66666666666666666666666666666666666666666667
            points[1] = 0.16666666666666666666666666666666666666666667
            points[2] = 0.16666666666666666666666666666666666666666667

            for i in range(3):
                if i == 0:
                    N1 = points[0]
                    N2 = points[1]
                    N3 = points[2]
                elif i == 1:
                    N1 = points[1]
                    N2 = points[2]
                    N3 = points[0]
                elif i == 2:
                    N1 = points[2]
                    N2 = points[0]
                    N3 = points[1]

                N1x = (y2 - y3)/(2*A)
                N2x = (-y1 + y3)/(2*A)
                N3x = (y1 - y2)/(2*A)
                N1y = (-x2 + x3)/(2*A)
                N2y = (x1 - x3)/(2*A)
                N3y = (-x1 + x2)/(2*A)

                Nxx = ue[0]*(A11*N1x + A16*N1y) + ue[10]*(B11*N2x + B16*N2y) + ue[12]*(A11*N3x + A16*N3y) + ue[13]*(A12*N3y + A16*N3x) - ue[15]*(B12*N3y + B16*N3x) + ue[16]*(B11*N3x + B16*N3y) + ue[1]*(A12*N1y + A16*N1x) - ue[3]*(B12*N1y + B16*N1x) + ue[4]*(B11*N1x + B16*N1y) + ue[6]*(A11*N2x + A16*N2y) + ue[7]*(A12*N2y + A16*N2x) - ue[9]*(B12*N2y + B16*N2x)
                Nyy = ue[0]*(A12*N1x + A26*N1y) + ue[10]*(B12*N2x + B26*N2y) + ue[12]*(A12*N3x + A26*N3y) + ue[13]*(A22*N3y + A26*N3x) - ue[15]*(B22*N3y + B26*N3x) + ue[16]*(B12*N3x + B26*N3y) + ue[1]*(A22*N1y + A26*N1x) - ue[3]*(B22*N1y + B26*N1x) + ue[4]*(B12*N1x + B26*N1y) + ue[6]*(A12*N2x + A26*N2y) + ue[7]*(A22*N2y + A26*N2x) - ue[9]*(B22*N2y + B26*N2x)
                Nxy = ue[0]*(A16*N1x + A66*N1y) + ue[10]*(B16*N2x + B66*N2y) + ue[12]*(A16*N3x + A66*N3y) + ue[13]*(A26*N3y + A66*N3x) - ue[15]*(B26*N3y + B66*N3x) + ue[16]*(B16*N3x + B66*N3y) + ue[1]*(A26*N1y + A66*N1x) - ue[3]*(B26*N1y + B66*N1x) + ue[4]*(B16*N1x + B66*N1y) + ue[6]*(A16*N2x + A66*N2y) + ue[7]*(A26*N2y + A66*N2x) - ue[9]*(B26*N2y + B66*N2x)

                k = self.init_k_KG
                KGv[k] += r13**2*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))


    cpdef void update_KG_given_stress(Tria3R self,
            double Nxx, double Nyy, double Nxy,
            np.ndarray[cINT, ndim=1] KGr,
            np.ndarray[cINT, ndim=1] KGc,
            np.ndarray[cDOUBLE, ndim=1] KGv,
            int update_KGv_only=0
            ):
        r"""Update sparse vectors for geometric stiffness matrix KG

        .. note:: A constant stress state is assumed within the element,
                  according to the given values of `N_{xx}, N_{yy}, N_{xy}`.

        Two-point Gauss-Legendre quadrature is used, which showed more accuracy
        for linear buckling load predictions.

        Before this function is called, the probe :class:`.Tria3RProbe`
        attribute of the :class:`Tria3R` object must be updated using
        :func:`.update_probe_xe` with the node coordinates.

        Properties
        ----------
        KGr : np.array
           Array to store row positions of sparse values
        KGc : np.array
           Array to store column positions of sparse values
        KGv : np.array
            Array to store sparse values
        update_KGv_only : int
            The default `0` means that only `KGv` is updated. Any other value will
            lead to `KGr` and `KGc` also being updated.

        """
        cdef cINT c1, c2, c3, i, k
        cdef double x1, x2, x3
        cdef double y1, y2, y3
        cdef double wij, detJ, A
        cdef double points[3]
        cdef double r11, r12, r13, r21, r22, r23, r31, r32, r33
        cdef double j11, j12, j21, j22
        cdef double N1, N2, N3, N1x, N2x, N3x, N1y, N2y, N3y

        with nogil:
            A = self.area
            detJ = 2*A

            #Local to global transformation
            r11 = self.r11
            r12 = self.r12
            r13 = self.r13
            r21 = self.r21
            r22 = self.r22
            r23 = self.r23
            r31 = self.r31
            r32 = self.r32
            r33 = self.r33

            #NOTE ignoring z in local coordinates
            x1 = self.probe.xe[0]
            y1 = self.probe.xe[1]
            #z1 = self.probe.xe[2]
            x2 = self.probe.xe[3]
            y2 = self.probe.xe[4]
            #z2 = self.probe.xe[5]
            x3 = self.probe.xe[6]
            y3 = self.probe.xe[7]
            #z3 = self.probe.xe[8]

            if update_KGv_only == 0:
                # positions of nodes 1,2,3,4 in the global matrix
                c1 = self.c1
                c2 = self.c2
                c3 = self.c3

                k = self.init_k_KG
                KGr[k] = 0+c1
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 0+c1
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 1+c1
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 2+c1
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 0+c2
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 1+c2
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 2+c2
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 0+c3
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 1+c3
                KGc[k] = 2+c3
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 0+c1
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 1+c1
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 2+c1
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 0+c2
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 1+c2
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 2+c2
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 0+c3
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 1+c3
                k += 1
                KGr[k] = 2+c3
                KGc[k] = 2+c3


            #NOTE 3-point Gauss-Legendre quadrature for KG
            #GAUSSIAN QUADRATURE FORMULAS FOR TRIANGLES
            #G. R. COWPER
            #https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1620070316
            wij = 0.333333333333333333333333333333333333333333333
            points[0] = 0.66666666666666666666666666666666666666666667
            points[1] = 0.16666666666666666666666666666666666666666667
            points[2] = 0.16666666666666666666666666666666666666666667
            for i in range(3):
                if i == 0:
                    N1 = points[0]
                    N2 = points[1]
                    N3 = points[2]
                elif i == 1:
                    N1 = points[1]
                    N2 = points[2]
                    N3 = points[0]
                elif i == 2:
                    N1 = points[2]
                    N2 = points[0]
                    N3 = points[1]

                N1x = (y2 - y3)/(2*A)
                N2x = (-y1 + y3)/(2*A)
                N3x = (y1 - y2)/(2*A)
                N1y = (-x2 + x3)/(2*A)
                N2y = (x1 - x3)/(2*A)
                N3y = (-x1 + x2)/(2*A)

                k = self.init_k_KG
                KGv[k] += r13**2*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N1x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N1y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N2x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N2y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N3x*(N1x*Nxx*detJ*wij + N1y*Nxy*detJ*wij) + N3y*(N1x*Nxy*detJ*wij + N1y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N1x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N1y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N2x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N2y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N3x*(N2x*Nxx*detJ*wij + N2y*Nxy*detJ*wij) + N3y*(N2x*Nxy*detJ*wij + N2y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13**2*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r23*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23**2*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N1x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N1y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N2x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N2y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r13*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r23*r33*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))
                k += 1
                KGv[k] += r33**2*(N3x*(N3x*Nxx*detJ*wij + N3y*Nxy*detJ*wij) + N3y*(N3x*Nxy*detJ*wij + N3y*Nyy*detJ*wij))


    cpdef void update_M(Tria3R self,
            np.ndarray[cINT, ndim=1] Mr,
            np.ndarray[cINT, ndim=1] Mc,
            np.ndarray[cDOUBLE, ndim=1] Mv,
            ShellProp prop,
            int mtype=0,
            ):
        r"""Update sparse vectors for mass matrix M

        Different integration schemes are available by means of the ``mtype``
        parameter.

        Properties
        ----------
        Mr : np.array
            Array to store row positions of sparse values
        Mc : np.array
            Array to store column positions of sparse values
        Mv : np.array
            Array to store sparse values
        mtype : int, optional
            0 for consistent mass matrix using method from Brockman 1987
            1 for reduced integration mass matrix using method from Brockman 1987
            2 for lumped mass matrix using method from Brockman 1987

        """
        cdef cINT c1, c2, c3, i, k
        cdef double intrho, intrhoz, intrhoz2, A
        cdef double r11, r12, r13, r21, r22, r23, r31, r32, r33
        cdef double x1, x2, x3
        cdef double y1, y2, y3
        cdef double j11, j12, j21, j22
        cdef double N1x, N2x, N3x
        cdef double N1y, N2y, N3y
        cdef double cxx, cyy, cxy
        cdef double h11, h12, h13, h22, h23, h33, valH1
        cdef double wij, detJ, N1, N2, N3
        cdef double points[3]

        with nogil:
            intrho = prop.intrho
            intrhoz = prop.intrhoz
            intrhoz2 = prop.intrhoz2

            A = self.area
            detJ = A
            valH1 = detJ/9.

            #NOTE ignoring z in local coordinates
            x1 = self.probe.xe[0]
            y1 = self.probe.xe[1]
            #z1 = self.probe.xe[2]
            x2 = self.probe.xe[3]
            y2 = self.probe.xe[4]
            #z2 = self.probe.xe[5]
            x3 = self.probe.xe[6]
            y3 = self.probe.xe[7]
            #z3 = self.probe.xe[8]

            #Local to global transformation
            r11 = self.r11
            r12 = self.r12
            r13 = self.r13
            r21 = self.r21
            r22 = self.r22
            r23 = self.r23
            r31 = self.r31
            r32 = self.r32
            r33 = self.r33

            # positions the global matrices
            c1 = self.c1
            c2 = self.c2
            c3 = self.c3

            if mtype == 0: # M_cons consistent mass matrix, using two-point Gauss-Legendre quadrature
                k = self.init_k_M
                Mr[k] = 0+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c3

                #NOTE 3-point Gauss-Legendre quadrature for KG
                #GAUSSIAN QUADRATURE FORMULAS FOR TRIANGLES
                #G. R. COWPER
                #https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1620070316
                wij = 0.333333333333333333333333333333333333333333333
                points[0] = 0.66666666666666666666666666666666666666666667
                points[1] = 0.16666666666666666666666666666666666666666667
                points[2] = 0.16666666666666666666666666666666666666666667
                h11 = 0.
                h12 = 0.
                h13 = 0.
                h22 = 0.
                h23 = 0.
                h33 = 0.
                for i in range(3):
                    if i == 0:
                        N1 = points[0]
                        N2 = points[1]
                        N3 = points[2]
                    elif i == 1:
                        N1 = points[1]
                        N2 = points[2]
                        N3 = points[0]
                    elif i == 2:
                        N1 = points[2]
                        N2 = points[0]
                        N3 = points[1]

                    h11 += N1**2*detJ*wij
                    h12 += N1*N2*detJ*wij
                    h13 += N1*N3*detJ*wij
                    h22 += N2**2*detJ*wij
                    h23 += N2*N3*detJ*wij
                    h33 += N3**2*detJ*wij

                k = self.init_k_M
                Mv[k] += h11*intrho*r11**2 + h11*intrho*r12**2 + h11*intrho*r13**2
                k += 1
                Mv[k] += h11*intrho*r11*r21 + h11*intrho*r12*r22 + h11*intrho*r13*r23
                k += 1
                Mv[k] += h11*intrho*r11*r31 + h11*intrho*r12*r32 + h11*intrho*r13*r33
                k += 1
                Mv[k] += h11*intrhoz*r11*r22 - h11*intrhoz*r12*r21
                k += 1
                Mv[k] += h11*intrhoz*r11*r32 - h11*intrhoz*r12*r31
                k += 1
                Mv[k] += h12*intrho*r11**2 + h12*intrho*r12**2 + h12*intrho*r13**2
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrhoz*r11*r22 - h12*intrhoz*r12*r21
                k += 1
                Mv[k] += h12*intrhoz*r11*r32 - h12*intrhoz*r12*r31
                k += 1
                Mv[k] += h13*intrho*r11**2 + h13*intrho*r12**2 + h13*intrho*r13**2
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrhoz*r11*r22 - h13*intrhoz*r12*r21
                k += 1
                Mv[k] += h13*intrhoz*r11*r32 - h13*intrhoz*r12*r31
                k += 1
                Mv[k] += h11*intrho*r11*r21 + h11*intrho*r12*r22 + h11*intrho*r13*r23
                k += 1
                Mv[k] += h11*intrho*r21**2 + h11*intrho*r22**2 + h11*intrho*r23**2
                k += 1
                Mv[k] += h11*intrho*r21*r31 + h11*intrho*r22*r32 + h11*intrho*r23*r33
                k += 1
                Mv[k] += -h11*intrhoz*r11*r22 + h11*intrhoz*r12*r21
                k += 1
                Mv[k] += h11*intrhoz*r21*r32 - h11*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r21**2 + h12*intrho*r22**2 + h12*intrho*r23**2
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += -h12*intrhoz*r11*r22 + h12*intrhoz*r12*r21
                k += 1
                Mv[k] += h12*intrhoz*r21*r32 - h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r21**2 + h13*intrho*r22**2 + h13*intrho*r23**2
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += -h13*intrhoz*r11*r22 + h13*intrhoz*r12*r21
                k += 1
                Mv[k] += h13*intrhoz*r21*r32 - h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h11*intrho*r11*r31 + h11*intrho*r12*r32 + h11*intrho*r13*r33
                k += 1
                Mv[k] += h11*intrho*r21*r31 + h11*intrho*r22*r32 + h11*intrho*r23*r33
                k += 1
                Mv[k] += h11*intrho*r31**2 + h11*intrho*r32**2 + h11*intrho*r33**2
                k += 1
                Mv[k] += -h11*intrhoz*r11*r32 + h11*intrhoz*r12*r31
                k += 1
                Mv[k] += -h11*intrhoz*r21*r32 + h11*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += h12*intrho*r31**2 + h12*intrho*r32**2 + h12*intrho*r33**2
                k += 1
                Mv[k] += -h12*intrhoz*r11*r32 + h12*intrhoz*r12*r31
                k += 1
                Mv[k] += -h12*intrhoz*r21*r32 + h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += h13*intrho*r31**2 + h13*intrho*r32**2 + h13*intrho*r33**2
                k += 1
                Mv[k] += -h13*intrhoz*r11*r32 + h13*intrhoz*r12*r31
                k += 1
                Mv[k] += -h13*intrhoz*r21*r32 + h13*intrhoz*r22*r31
                k += 1
                Mv[k] += -h11*intrhoz*r11*r22 + h11*intrhoz*r12*r21
                k += 1
                Mv[k] += -h11*intrhoz*r11*r32 + h11*intrhoz*r12*r31
                k += 1
                Mv[k] += h11*intrhoz2*r11**2 + h11*intrhoz2*r12**2
                k += 1
                Mv[k] += h11*intrhoz2*r11*r21 + h11*intrhoz2*r12*r22
                k += 1
                Mv[k] += h11*intrhoz2*r11*r31 + h11*intrhoz2*r12*r32
                k += 1
                Mv[k] += -h12*intrhoz*r11*r22 + h12*intrhoz*r12*r21
                k += 1
                Mv[k] += -h12*intrhoz*r11*r32 + h12*intrhoz*r12*r31
                k += 1
                Mv[k] += h12*intrhoz2*r11**2 + h12*intrhoz2*r12**2
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += -h13*intrhoz*r11*r22 + h13*intrhoz*r12*r21
                k += 1
                Mv[k] += -h13*intrhoz*r11*r32 + h13*intrhoz*r12*r31
                k += 1
                Mv[k] += h13*intrhoz2*r11**2 + h13*intrhoz2*r12**2
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h11*intrhoz*r11*r22 - h11*intrhoz*r12*r21
                k += 1
                Mv[k] += -h11*intrhoz*r21*r32 + h11*intrhoz*r22*r31
                k += 1
                Mv[k] += h11*intrhoz2*r11*r21 + h11*intrhoz2*r12*r22
                k += 1
                Mv[k] += h11*intrhoz2*r21**2 + h11*intrhoz2*r22**2
                k += 1
                Mv[k] += h11*intrhoz2*r21*r31 + h11*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz*r11*r22 - h12*intrhoz*r12*r21
                k += 1
                Mv[k] += -h12*intrhoz*r21*r32 + h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r21**2 + h12*intrhoz2*r22**2
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz*r11*r22 - h13*intrhoz*r12*r21
                k += 1
                Mv[k] += -h13*intrhoz*r21*r32 + h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r21**2 + h13*intrhoz2*r22**2
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h11*intrhoz*r11*r32 - h11*intrhoz*r12*r31
                k += 1
                Mv[k] += h11*intrhoz*r21*r32 - h11*intrhoz*r22*r31
                k += 1
                Mv[k] += h11*intrhoz2*r11*r31 + h11*intrhoz2*r12*r32
                k += 1
                Mv[k] += h11*intrhoz2*r21*r31 + h11*intrhoz2*r22*r32
                k += 1
                Mv[k] += h11*intrhoz2*r31**2 + h11*intrhoz2*r32**2
                k += 1
                Mv[k] += h12*intrhoz*r11*r32 - h12*intrhoz*r12*r31
                k += 1
                Mv[k] += h12*intrhoz*r21*r32 - h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz2*r31**2 + h12*intrhoz2*r32**2
                k += 1
                Mv[k] += h13*intrhoz*r11*r32 - h13*intrhoz*r12*r31
                k += 1
                Mv[k] += h13*intrhoz*r21*r32 - h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz2*r31**2 + h13*intrhoz2*r32**2
                k += 1
                Mv[k] += h12*intrho*r11**2 + h12*intrho*r12**2 + h12*intrho*r13**2
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrhoz*r11*r22 - h12*intrhoz*r12*r21
                k += 1
                Mv[k] += h12*intrhoz*r11*r32 - h12*intrhoz*r12*r31
                k += 1
                Mv[k] += h22*intrho*r11**2 + h22*intrho*r12**2 + h22*intrho*r13**2
                k += 1
                Mv[k] += h22*intrho*r11*r21 + h22*intrho*r12*r22 + h22*intrho*r13*r23
                k += 1
                Mv[k] += h22*intrho*r11*r31 + h22*intrho*r12*r32 + h22*intrho*r13*r33
                k += 1
                Mv[k] += h22*intrhoz*r11*r22 - h22*intrhoz*r12*r21
                k += 1
                Mv[k] += h22*intrhoz*r11*r32 - h22*intrhoz*r12*r31
                k += 1
                Mv[k] += h23*intrho*r11**2 + h23*intrho*r12**2 + h23*intrho*r13**2
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrhoz*r11*r22 - h23*intrhoz*r12*r21
                k += 1
                Mv[k] += h23*intrhoz*r11*r32 - h23*intrhoz*r12*r31
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r21**2 + h12*intrho*r22**2 + h12*intrho*r23**2
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += -h12*intrhoz*r11*r22 + h12*intrhoz*r12*r21
                k += 1
                Mv[k] += h12*intrhoz*r21*r32 - h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h22*intrho*r11*r21 + h22*intrho*r12*r22 + h22*intrho*r13*r23
                k += 1
                Mv[k] += h22*intrho*r21**2 + h22*intrho*r22**2 + h22*intrho*r23**2
                k += 1
                Mv[k] += h22*intrho*r21*r31 + h22*intrho*r22*r32 + h22*intrho*r23*r33
                k += 1
                Mv[k] += -h22*intrhoz*r11*r22 + h22*intrhoz*r12*r21
                k += 1
                Mv[k] += h22*intrhoz*r21*r32 - h22*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r21**2 + h23*intrho*r22**2 + h23*intrho*r23**2
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += -h23*intrhoz*r11*r22 + h23*intrhoz*r12*r21
                k += 1
                Mv[k] += h23*intrhoz*r21*r32 - h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += h12*intrho*r31**2 + h12*intrho*r32**2 + h12*intrho*r33**2
                k += 1
                Mv[k] += -h12*intrhoz*r11*r32 + h12*intrhoz*r12*r31
                k += 1
                Mv[k] += -h12*intrhoz*r21*r32 + h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h22*intrho*r11*r31 + h22*intrho*r12*r32 + h22*intrho*r13*r33
                k += 1
                Mv[k] += h22*intrho*r21*r31 + h22*intrho*r22*r32 + h22*intrho*r23*r33
                k += 1
                Mv[k] += h22*intrho*r31**2 + h22*intrho*r32**2 + h22*intrho*r33**2
                k += 1
                Mv[k] += -h22*intrhoz*r11*r32 + h22*intrhoz*r12*r31
                k += 1
                Mv[k] += -h22*intrhoz*r21*r32 + h22*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += h23*intrho*r31**2 + h23*intrho*r32**2 + h23*intrho*r33**2
                k += 1
                Mv[k] += -h23*intrhoz*r11*r32 + h23*intrhoz*r12*r31
                k += 1
                Mv[k] += -h23*intrhoz*r21*r32 + h23*intrhoz*r22*r31
                k += 1
                Mv[k] += -h12*intrhoz*r11*r22 + h12*intrhoz*r12*r21
                k += 1
                Mv[k] += -h12*intrhoz*r11*r32 + h12*intrhoz*r12*r31
                k += 1
                Mv[k] += h12*intrhoz2*r11**2 + h12*intrhoz2*r12**2
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += -h22*intrhoz*r11*r22 + h22*intrhoz*r12*r21
                k += 1
                Mv[k] += -h22*intrhoz*r11*r32 + h22*intrhoz*r12*r31
                k += 1
                Mv[k] += h22*intrhoz2*r11**2 + h22*intrhoz2*r12**2
                k += 1
                Mv[k] += h22*intrhoz2*r11*r21 + h22*intrhoz2*r12*r22
                k += 1
                Mv[k] += h22*intrhoz2*r11*r31 + h22*intrhoz2*r12*r32
                k += 1
                Mv[k] += -h23*intrhoz*r11*r22 + h23*intrhoz*r12*r21
                k += 1
                Mv[k] += -h23*intrhoz*r11*r32 + h23*intrhoz*r12*r31
                k += 1
                Mv[k] += h23*intrhoz2*r11**2 + h23*intrhoz2*r12**2
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz*r11*r22 - h12*intrhoz*r12*r21
                k += 1
                Mv[k] += -h12*intrhoz*r21*r32 + h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r21**2 + h12*intrhoz2*r22**2
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h22*intrhoz*r11*r22 - h22*intrhoz*r12*r21
                k += 1
                Mv[k] += -h22*intrhoz*r21*r32 + h22*intrhoz*r22*r31
                k += 1
                Mv[k] += h22*intrhoz2*r11*r21 + h22*intrhoz2*r12*r22
                k += 1
                Mv[k] += h22*intrhoz2*r21**2 + h22*intrhoz2*r22**2
                k += 1
                Mv[k] += h22*intrhoz2*r21*r31 + h22*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz*r11*r22 - h23*intrhoz*r12*r21
                k += 1
                Mv[k] += -h23*intrhoz*r21*r32 + h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r21**2 + h23*intrhoz2*r22**2
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz*r11*r32 - h12*intrhoz*r12*r31
                k += 1
                Mv[k] += h12*intrhoz*r21*r32 - h12*intrhoz*r22*r31
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz2*r31**2 + h12*intrhoz2*r32**2
                k += 1
                Mv[k] += h22*intrhoz*r11*r32 - h22*intrhoz*r12*r31
                k += 1
                Mv[k] += h22*intrhoz*r21*r32 - h22*intrhoz*r22*r31
                k += 1
                Mv[k] += h22*intrhoz2*r11*r31 + h22*intrhoz2*r12*r32
                k += 1
                Mv[k] += h22*intrhoz2*r21*r31 + h22*intrhoz2*r22*r32
                k += 1
                Mv[k] += h22*intrhoz2*r31**2 + h22*intrhoz2*r32**2
                k += 1
                Mv[k] += h23*intrhoz*r11*r32 - h23*intrhoz*r12*r31
                k += 1
                Mv[k] += h23*intrhoz*r21*r32 - h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz2*r31**2 + h23*intrhoz2*r32**2
                k += 1
                Mv[k] += h13*intrho*r11**2 + h13*intrho*r12**2 + h13*intrho*r13**2
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrhoz*r11*r22 - h13*intrhoz*r12*r21
                k += 1
                Mv[k] += h13*intrhoz*r11*r32 - h13*intrhoz*r12*r31
                k += 1
                Mv[k] += h23*intrho*r11**2 + h23*intrho*r12**2 + h23*intrho*r13**2
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrhoz*r11*r22 - h23*intrhoz*r12*r21
                k += 1
                Mv[k] += h23*intrhoz*r11*r32 - h23*intrhoz*r12*r31
                k += 1
                Mv[k] += h33*intrho*r11**2 + h33*intrho*r12**2 + h33*intrho*r13**2
                k += 1
                Mv[k] += h33*intrho*r11*r21 + h33*intrho*r12*r22 + h33*intrho*r13*r23
                k += 1
                Mv[k] += h33*intrho*r11*r31 + h33*intrho*r12*r32 + h33*intrho*r13*r33
                k += 1
                Mv[k] += h33*intrhoz*r11*r22 - h33*intrhoz*r12*r21
                k += 1
                Mv[k] += h33*intrhoz*r11*r32 - h33*intrhoz*r12*r31
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r21**2 + h13*intrho*r22**2 + h13*intrho*r23**2
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += -h13*intrhoz*r11*r22 + h13*intrhoz*r12*r21
                k += 1
                Mv[k] += h13*intrhoz*r21*r32 - h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r21**2 + h23*intrho*r22**2 + h23*intrho*r23**2
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += -h23*intrhoz*r11*r22 + h23*intrhoz*r12*r21
                k += 1
                Mv[k] += h23*intrhoz*r21*r32 - h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h33*intrho*r11*r21 + h33*intrho*r12*r22 + h33*intrho*r13*r23
                k += 1
                Mv[k] += h33*intrho*r21**2 + h33*intrho*r22**2 + h33*intrho*r23**2
                k += 1
                Mv[k] += h33*intrho*r21*r31 + h33*intrho*r22*r32 + h33*intrho*r23*r33
                k += 1
                Mv[k] += -h33*intrhoz*r11*r22 + h33*intrhoz*r12*r21
                k += 1
                Mv[k] += h33*intrhoz*r21*r32 - h33*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += h13*intrho*r31**2 + h13*intrho*r32**2 + h13*intrho*r33**2
                k += 1
                Mv[k] += -h13*intrhoz*r11*r32 + h13*intrhoz*r12*r31
                k += 1
                Mv[k] += -h13*intrhoz*r21*r32 + h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += h23*intrho*r31**2 + h23*intrho*r32**2 + h23*intrho*r33**2
                k += 1
                Mv[k] += -h23*intrhoz*r11*r32 + h23*intrhoz*r12*r31
                k += 1
                Mv[k] += -h23*intrhoz*r21*r32 + h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h33*intrho*r11*r31 + h33*intrho*r12*r32 + h33*intrho*r13*r33
                k += 1
                Mv[k] += h33*intrho*r21*r31 + h33*intrho*r22*r32 + h33*intrho*r23*r33
                k += 1
                Mv[k] += h33*intrho*r31**2 + h33*intrho*r32**2 + h33*intrho*r33**2
                k += 1
                Mv[k] += -h33*intrhoz*r11*r32 + h33*intrhoz*r12*r31
                k += 1
                Mv[k] += -h33*intrhoz*r21*r32 + h33*intrhoz*r22*r31
                k += 1
                Mv[k] += -h13*intrhoz*r11*r22 + h13*intrhoz*r12*r21
                k += 1
                Mv[k] += -h13*intrhoz*r11*r32 + h13*intrhoz*r12*r31
                k += 1
                Mv[k] += h13*intrhoz2*r11**2 + h13*intrhoz2*r12**2
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += -h23*intrhoz*r11*r22 + h23*intrhoz*r12*r21
                k += 1
                Mv[k] += -h23*intrhoz*r11*r32 + h23*intrhoz*r12*r31
                k += 1
                Mv[k] += h23*intrhoz2*r11**2 + h23*intrhoz2*r12**2
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += -h33*intrhoz*r11*r22 + h33*intrhoz*r12*r21
                k += 1
                Mv[k] += -h33*intrhoz*r11*r32 + h33*intrhoz*r12*r31
                k += 1
                Mv[k] += h33*intrhoz2*r11**2 + h33*intrhoz2*r12**2
                k += 1
                Mv[k] += h33*intrhoz2*r11*r21 + h33*intrhoz2*r12*r22
                k += 1
                Mv[k] += h33*intrhoz2*r11*r31 + h33*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz*r11*r22 - h13*intrhoz*r12*r21
                k += 1
                Mv[k] += -h13*intrhoz*r21*r32 + h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r21**2 + h13*intrhoz2*r22**2
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz*r11*r22 - h23*intrhoz*r12*r21
                k += 1
                Mv[k] += -h23*intrhoz*r21*r32 + h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r21**2 + h23*intrhoz2*r22**2
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h33*intrhoz*r11*r22 - h33*intrhoz*r12*r21
                k += 1
                Mv[k] += -h33*intrhoz*r21*r32 + h33*intrhoz*r22*r31
                k += 1
                Mv[k] += h33*intrhoz2*r11*r21 + h33*intrhoz2*r12*r22
                k += 1
                Mv[k] += h33*intrhoz2*r21**2 + h33*intrhoz2*r22**2
                k += 1
                Mv[k] += h33*intrhoz2*r21*r31 + h33*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz*r11*r32 - h13*intrhoz*r12*r31
                k += 1
                Mv[k] += h13*intrhoz*r21*r32 - h13*intrhoz*r22*r31
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz2*r31**2 + h13*intrhoz2*r32**2
                k += 1
                Mv[k] += h23*intrhoz*r11*r32 - h23*intrhoz*r12*r31
                k += 1
                Mv[k] += h23*intrhoz*r21*r32 - h23*intrhoz*r22*r31
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz2*r31**2 + h23*intrhoz2*r32**2
                k += 1
                Mv[k] += h33*intrhoz*r11*r32 - h33*intrhoz*r12*r31
                k += 1
                Mv[k] += h33*intrhoz*r21*r32 - h33*intrhoz*r22*r31
                k += 1
                Mv[k] += h33*intrhoz2*r11*r31 + h33*intrhoz2*r12*r32
                k += 1
                Mv[k] += h33*intrhoz2*r21*r31 + h33*intrhoz2*r22*r32
                k += 1
                Mv[k] += h33*intrhoz2*r31**2 + h33*intrhoz2*r32**2

            elif mtype == 1: # M_red mass matrix purely by reduced integration
                k = self.init_k_M
                Mr[k] = 0+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c3

                k = self.init_k_M
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11**2*valH1 + intrho*r12**2*valH1 + intrho*r13**2*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r21*valH1 + intrho*r12*r22*valH1 + intrho*r13*r23*valH1
                k += 1
                Mv[k] += intrho*r21**2*valH1 + intrho*r22**2*valH1 + intrho*r23**2*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrho*r11*r31*valH1 + intrho*r12*r32*valH1 + intrho*r13*r33*valH1
                k += 1
                Mv[k] += intrho*r21*r31*valH1 + intrho*r22*r32*valH1 + intrho*r23*r33*valH1
                k += 1
                Mv[k] += intrho*r31**2*valH1 + intrho*r32**2*valH1 + intrho*r33**2*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r22*valH1 + intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r11*r32*valH1 + intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11**2*valH1 + intrhoz2*r12**2*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r22*valH1 - intrhoz*r12*r21*valH1
                k += 1
                Mv[k] += -intrhoz*r21*r32*valH1 + intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r21*valH1 + intrhoz2*r12*r22*valH1
                k += 1
                Mv[k] += intrhoz2*r21**2*valH1 + intrhoz2*r22**2*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1
                k += 1
                Mv[k] += intrhoz*r11*r32*valH1 - intrhoz*r12*r31*valH1
                k += 1
                Mv[k] += intrhoz*r21*r32*valH1 - intrhoz*r22*r31*valH1
                k += 1
                Mv[k] += intrhoz2*r11*r31*valH1 + intrhoz2*r12*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r21*r31*valH1 + intrhoz2*r22*r32*valH1
                k += 1
                Mv[k] += intrhoz2*r31**2*valH1 + intrhoz2*r32**2*valH1


            elif mtype == 2: # M_lump lumped mass matrix using two-point Gauss-Lobatto quadrature
                k = self.init_k_M
                Mr[k] = 0+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c1
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c1
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c2
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c2
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 0+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 1+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c1
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c2
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 0+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 1+c3
                k += 1
                Mr[k] = 2+c3
                Mc[k] = 2+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 3+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 4+c3
                Mc[k] = 5+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c1
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c2
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 3+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 4+c3
                k += 1
                Mr[k] = 5+c3
                Mc[k] = 5+c3

                wij = 0.3333333333333333333333333333333333333
                #NOTE three-point Gauss-Lobatto quadrature
                points[0] = 1.
                points[2] = 0.
                points[3] = 0.
                h11 = 0.
                h12 = 0.
                h13 = 0.
                h22 = 0.
                h23 = 0.
                h33 = 0.
                for i in range(3):
                    if i == 0:
                        N1 = points[0]
                        N2 = points[1]
                        N3 = points[2]
                    elif i == 1:
                        N1 = points[1]
                        N2 = points[2]
                        N3 = points[0]
                    elif i == 2:
                        N1 = points[2]
                        N2 = points[0]
                        N3 = points[1]
                    h11 += N1**2*detJ*wij
                    h12 += N1*N2*detJ*wij
                    h13 += N1*N3*detJ*wij
                    h22 += N2**2*detJ*wij
                    h23 += N2*N3*detJ*wij
                    h33 += N3**2*detJ*wij

                k = self.init_k_M
                Mv[k] += h11*intrho*r11**2 + h11*intrho*r12**2 + h11*intrho*r13**2
                k += 1
                Mv[k] += h11*intrho*r11*r21 + h11*intrho*r12*r22 + h11*intrho*r13*r23
                k += 1
                Mv[k] += h11*intrho*r11*r31 + h11*intrho*r12*r32 + h11*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrho*r11**2 + h12*intrho*r12**2 + h12*intrho*r13**2
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrho*r11**2 + h13*intrho*r12**2 + h13*intrho*r13**2
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h11*intrho*r11*r21 + h11*intrho*r12*r22 + h11*intrho*r13*r23
                k += 1
                Mv[k] += h11*intrho*r21**2 + h11*intrho*r22**2 + h11*intrho*r23**2
                k += 1
                Mv[k] += h11*intrho*r21*r31 + h11*intrho*r22*r32 + h11*intrho*r23*r33
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r21**2 + h12*intrho*r22**2 + h12*intrho*r23**2
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r21**2 + h13*intrho*r22**2 + h13*intrho*r23**2
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += h11*intrho*r11*r31 + h11*intrho*r12*r32 + h11*intrho*r13*r33
                k += 1
                Mv[k] += h11*intrho*r21*r31 + h11*intrho*r22*r32 + h11*intrho*r23*r33
                k += 1
                Mv[k] += h11*intrho*r31**2 + h11*intrho*r32**2 + h11*intrho*r33**2
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += h12*intrho*r31**2 + h12*intrho*r32**2 + h12*intrho*r33**2
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += h13*intrho*r31**2 + h13*intrho*r32**2 + h13*intrho*r33**2
                k += 1
                Mv[k] += h11*intrhoz2*r11**2 + h11*intrhoz2*r12**2
                k += 1
                Mv[k] += h11*intrhoz2*r11*r21 + h11*intrhoz2*r12*r22
                k += 1
                Mv[k] += h11*intrhoz2*r11*r31 + h11*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz2*r11**2 + h12*intrhoz2*r12**2
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz2*r11**2 + h13*intrhoz2*r12**2
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h11*intrhoz2*r11*r21 + h11*intrhoz2*r12*r22
                k += 1
                Mv[k] += h11*intrhoz2*r21**2 + h11*intrhoz2*r22**2
                k += 1
                Mv[k] += h11*intrhoz2*r21*r31 + h11*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r21**2 + h12*intrhoz2*r22**2
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r21**2 + h13*intrhoz2*r22**2
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h11*intrhoz2*r11*r31 + h11*intrhoz2*r12*r32
                k += 1
                Mv[k] += h11*intrhoz2*r21*r31 + h11*intrhoz2*r22*r32
                k += 1
                Mv[k] += h11*intrhoz2*r31**2 + h11*intrhoz2*r32**2
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz2*r31**2 + h12*intrhoz2*r32**2
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz2*r31**2 + h13*intrhoz2*r32**2
                k += 1
                Mv[k] += h12*intrho*r11**2 + h12*intrho*r12**2 + h12*intrho*r13**2
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h22*intrho*r11**2 + h22*intrho*r12**2 + h22*intrho*r13**2
                k += 1
                Mv[k] += h22*intrho*r11*r21 + h22*intrho*r12*r22 + h22*intrho*r13*r23
                k += 1
                Mv[k] += h22*intrho*r11*r31 + h22*intrho*r12*r32 + h22*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrho*r11**2 + h23*intrho*r12**2 + h23*intrho*r13**2
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrho*r11*r21 + h12*intrho*r12*r22 + h12*intrho*r13*r23
                k += 1
                Mv[k] += h12*intrho*r21**2 + h12*intrho*r22**2 + h12*intrho*r23**2
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += h22*intrho*r11*r21 + h22*intrho*r12*r22 + h22*intrho*r13*r23
                k += 1
                Mv[k] += h22*intrho*r21**2 + h22*intrho*r22**2 + h22*intrho*r23**2
                k += 1
                Mv[k] += h22*intrho*r21*r31 + h22*intrho*r22*r32 + h22*intrho*r23*r33
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r21**2 + h23*intrho*r22**2 + h23*intrho*r23**2
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += h12*intrho*r11*r31 + h12*intrho*r12*r32 + h12*intrho*r13*r33
                k += 1
                Mv[k] += h12*intrho*r21*r31 + h12*intrho*r22*r32 + h12*intrho*r23*r33
                k += 1
                Mv[k] += h12*intrho*r31**2 + h12*intrho*r32**2 + h12*intrho*r33**2
                k += 1
                Mv[k] += h22*intrho*r11*r31 + h22*intrho*r12*r32 + h22*intrho*r13*r33
                k += 1
                Mv[k] += h22*intrho*r21*r31 + h22*intrho*r22*r32 + h22*intrho*r23*r33
                k += 1
                Mv[k] += h22*intrho*r31**2 + h22*intrho*r32**2 + h22*intrho*r33**2
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += h23*intrho*r31**2 + h23*intrho*r32**2 + h23*intrho*r33**2
                k += 1
                Mv[k] += h12*intrhoz2*r11**2 + h12*intrhoz2*r12**2
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += h22*intrhoz2*r11**2 + h22*intrhoz2*r12**2
                k += 1
                Mv[k] += h22*intrhoz2*r11*r21 + h22*intrhoz2*r12*r22
                k += 1
                Mv[k] += h22*intrhoz2*r11*r31 + h22*intrhoz2*r12*r32
                k += 1
                Mv[k] += h23*intrhoz2*r11**2 + h23*intrhoz2*r12**2
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz2*r11*r21 + h12*intrhoz2*r12*r22
                k += 1
                Mv[k] += h12*intrhoz2*r21**2 + h12*intrhoz2*r22**2
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h22*intrhoz2*r11*r21 + h22*intrhoz2*r12*r22
                k += 1
                Mv[k] += h22*intrhoz2*r21**2 + h22*intrhoz2*r22**2
                k += 1
                Mv[k] += h22*intrhoz2*r21*r31 + h22*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r21**2 + h23*intrhoz2*r22**2
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz2*r11*r31 + h12*intrhoz2*r12*r32
                k += 1
                Mv[k] += h12*intrhoz2*r21*r31 + h12*intrhoz2*r22*r32
                k += 1
                Mv[k] += h12*intrhoz2*r31**2 + h12*intrhoz2*r32**2
                k += 1
                Mv[k] += h22*intrhoz2*r11*r31 + h22*intrhoz2*r12*r32
                k += 1
                Mv[k] += h22*intrhoz2*r21*r31 + h22*intrhoz2*r22*r32
                k += 1
                Mv[k] += h22*intrhoz2*r31**2 + h22*intrhoz2*r32**2
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz2*r31**2 + h23*intrhoz2*r32**2
                k += 1
                Mv[k] += h13*intrho*r11**2 + h13*intrho*r12**2 + h13*intrho*r13**2
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrho*r11**2 + h23*intrho*r12**2 + h23*intrho*r13**2
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h33*intrho*r11**2 + h33*intrho*r12**2 + h33*intrho*r13**2
                k += 1
                Mv[k] += h33*intrho*r11*r21 + h33*intrho*r12*r22 + h33*intrho*r13*r23
                k += 1
                Mv[k] += h33*intrho*r11*r31 + h33*intrho*r12*r32 + h33*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrho*r11*r21 + h13*intrho*r12*r22 + h13*intrho*r13*r23
                k += 1
                Mv[k] += h13*intrho*r21**2 + h13*intrho*r22**2 + h13*intrho*r23**2
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += h23*intrho*r11*r21 + h23*intrho*r12*r22 + h23*intrho*r13*r23
                k += 1
                Mv[k] += h23*intrho*r21**2 + h23*intrho*r22**2 + h23*intrho*r23**2
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += h33*intrho*r11*r21 + h33*intrho*r12*r22 + h33*intrho*r13*r23
                k += 1
                Mv[k] += h33*intrho*r21**2 + h33*intrho*r22**2 + h33*intrho*r23**2
                k += 1
                Mv[k] += h33*intrho*r21*r31 + h33*intrho*r22*r32 + h33*intrho*r23*r33
                k += 1
                Mv[k] += h13*intrho*r11*r31 + h13*intrho*r12*r32 + h13*intrho*r13*r33
                k += 1
                Mv[k] += h13*intrho*r21*r31 + h13*intrho*r22*r32 + h13*intrho*r23*r33
                k += 1
                Mv[k] += h13*intrho*r31**2 + h13*intrho*r32**2 + h13*intrho*r33**2
                k += 1
                Mv[k] += h23*intrho*r11*r31 + h23*intrho*r12*r32 + h23*intrho*r13*r33
                k += 1
                Mv[k] += h23*intrho*r21*r31 + h23*intrho*r22*r32 + h23*intrho*r23*r33
                k += 1
                Mv[k] += h23*intrho*r31**2 + h23*intrho*r32**2 + h23*intrho*r33**2
                k += 1
                Mv[k] += h33*intrho*r11*r31 + h33*intrho*r12*r32 + h33*intrho*r13*r33
                k += 1
                Mv[k] += h33*intrho*r21*r31 + h33*intrho*r22*r32 + h33*intrho*r23*r33
                k += 1
                Mv[k] += h33*intrho*r31**2 + h33*intrho*r32**2 + h33*intrho*r33**2
                k += 1
                Mv[k] += h13*intrhoz2*r11**2 + h13*intrhoz2*r12**2
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h23*intrhoz2*r11**2 + h23*intrhoz2*r12**2
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h33*intrhoz2*r11**2 + h33*intrhoz2*r12**2
                k += 1
                Mv[k] += h33*intrhoz2*r11*r21 + h33*intrhoz2*r12*r22
                k += 1
                Mv[k] += h33*intrhoz2*r11*r31 + h33*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz2*r11*r21 + h13*intrhoz2*r12*r22
                k += 1
                Mv[k] += h13*intrhoz2*r21**2 + h13*intrhoz2*r22**2
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz2*r11*r21 + h23*intrhoz2*r12*r22
                k += 1
                Mv[k] += h23*intrhoz2*r21**2 + h23*intrhoz2*r22**2
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h33*intrhoz2*r11*r21 + h33*intrhoz2*r12*r22
                k += 1
                Mv[k] += h33*intrhoz2*r21**2 + h33*intrhoz2*r22**2
                k += 1
                Mv[k] += h33*intrhoz2*r21*r31 + h33*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz2*r11*r31 + h13*intrhoz2*r12*r32
                k += 1
                Mv[k] += h13*intrhoz2*r21*r31 + h13*intrhoz2*r22*r32
                k += 1
                Mv[k] += h13*intrhoz2*r31**2 + h13*intrhoz2*r32**2
                k += 1
                Mv[k] += h23*intrhoz2*r11*r31 + h23*intrhoz2*r12*r32
                k += 1
                Mv[k] += h23*intrhoz2*r21*r31 + h23*intrhoz2*r22*r32
                k += 1
                Mv[k] += h23*intrhoz2*r31**2 + h23*intrhoz2*r32**2
                k += 1
                Mv[k] += h33*intrhoz2*r11*r31 + h33*intrhoz2*r12*r32
                k += 1
                Mv[k] += h33*intrhoz2*r21*r31 + h33*intrhoz2*r22*r32
                k += 1
                Mv[k] += h33*intrhoz2*r31**2 + h33*intrhoz2*r32**2

